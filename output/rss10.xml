<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="devops-br.org">
	<title>DevOps Brasil</title>
	<link>devops-br.org</link>
	<description>DevOps Brasil - devops-br.org</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="http://techfree.com.br/?p=233" />
			<rdf:li rdf:resource="http://cloud/2015/05/23/A_verdade_que_ninguem_nunca_contou_a_voce_sobre_Cloud_Computing/" />
			<rdf:li rdf:resource="http://techfree.com.br/?p=230" />
			<rdf:li rdf:resource="http://techfree.com.br/?p=222" />
			<rdf:li rdf:resource="http://www.ricardomartins.com.br/?p=5700" />
			<rdf:li rdf:resource="http://techfree.com.br/?p=218" />
			<rdf:li rdf:resource="http://techfree.com.br/?p=213" />
			<rdf:li rdf:resource="http://gutocarvalho.net/octopress/2015/04/24/treinamento-puppet-fundamentals-em-brasilia" />
			<rdf:li rdf:resource="http://techfree.com.br/?p=186" />
			<rdf:li rdf:resource="http://gutocarvalho.net/octopress/2015/04/15/perguntas-pontuais-devops" />
			<rdf:li rdf:resource="http://techfree.com.br/?p=130" />
			<rdf:li rdf:resource="http://gutocarvalho.net/octopress/2015/04/10/treinamento-architect-em-san-jose-slash-ca" />
			<rdf:li rdf:resource="http://gutocarvalho.net/octopress/2015/04/09/1o-treinamento-puppet-fundamentals-em-porto-alegre" />
			<rdf:li rdf:resource="http://www.ricardomartins.com.br/?p=5661" />
			<rdf:li rdf:resource="http://techfree.com.br/?p=111" />
			<rdf:li rdf:resource="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-machine.html" />
			<rdf:li rdf:resource="http://www.ricardomartins.com.br/?p=5567" />
			<rdf:li rdf:resource="http://stefanteixeira.com.br/tag/devops/rss/edec586a-54e9-4614-b747-dddac13b7e2d" />
			<rdf:li rdf:resource="http://www.ricardomartins.com.br/?p=5544" />
			<rdf:li rdf:resource="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-orquestracao.html" />
			<rdf:li rdf:resource="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-montando-containers.html" />
			<rdf:li rdf:resource="http://stefanteixeira.com.br/tag/devops/rss/7b2c242d-a97d-4e01-911f-c9bceeee6d90" />
			<rdf:li rdf:resource="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-basico.html" />
			<rdf:li rdf:resource="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-introducao.html" />
			<rdf:li rdf:resource="http://www.ricardomartins.com.br/?p=5350" />
			<rdf:li rdf:resource="http://www.ricardomartins.com.br/?p=5318" />
			<rdf:li rdf:resource="http://gutocarvalho.net/octopress/2015/02/04/video-webinar-puppet-modules" />
			<rdf:li rdf:resource="http://www.ricardomartins.com.br/?p=5270" />
			<rdf:li rdf:resource="http://www.ricardomartins.com.br/?p=5253" />
			<rdf:li rdf:resource="http://stefanteixeira.com.br/tag/devops/rss/87648a0c-3679-41d4-b402-00cb368d388e" />
			<rdf:li rdf:resource="http://stefanteixeira.com.br/tag/devops/rss/92124a54-21b0-4a89-9834-0e77395050c6" />
			<rdf:li rdf:resource="http://stefanteixeira.com.br/tag/devops/rss/453a2ec2-1e16-46bc-b640-1efbfbabdfc5" />
			<rdf:li rdf:resource="http://www.ricardomartins.com.br/?p=5068" />
			<rdf:li rdf:resource="http://webcomfarinha.com/blog/?p=624" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="http://techfree.com.br/?p=233">
	<title>Gomex: DevOps Brasil – Agregador de blogs</title>
	<link>http://techfree.com.br/2015/05/devops-brasil-agregador-de-blogs/</link>
	<content:encoded>&lt;p&gt;Há algum tempo tenho sentido dificuldade de encontrar um espaço para congregar material e reunir interessados sobre esse assunto, pois tudo era muito pulverizado pela internet. Logo, como eu também venho da comunidade Software Livre, resolvi &amp;#8220;enviar o patch&amp;#8221; para corrigir isso e agora apresento a você uma proposta.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://techfree.com.br/wp-content/uploads/2015/05/devops-tag.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-235 &quot; src=&quot;http://techfree.com.br/wp-content/uploads/2015/05/devops-tag.png&quot; alt=&quot;devops-tag&quot; width=&quot;646&quot; height=&quot;174&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DevOps Brasil é um planet, um agregador de blogs, a ideia é reunir postagens sobre o assunto devops e assim fortalecer ainda mais os interessados no assunto, trocando experiência e provocando ainda mais o networking. Lendo materiais na internet, encontrei seus textos e resolvi lhe convidar para iniciar esse projeto comigo. Topa participar?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://devops-br.org&quot; target=&quot;_blank&quot;&gt;http://devops-br.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nesse planet, as postagens aparecem resumidas, ou seja, o leitor para ler a versão completa clicará no assunto, que por sua vez será redirecionado para seu blog pessoal. Resumindo, a ideia do planet não é centralizar as visitas, mas sim possibilitar sua distribuição.&lt;/p&gt;
&lt;h3&gt;Entrar no Planet&lt;/h3&gt;
&lt;p&gt;Para adicionar seu blog aqui é muito simples. Basta submeter seu pedido via um merge request no &lt;a href=&quot;https://github.com/devops-br/planet&quot; target=&quot;_blank&quot;&gt;repositório do planet devops-br&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O arquivo a ser manipulado é o config.ini, ele é auto-explicativo, mas caso tenha problemas basta seguir o exemplo do blog &amp;#8220;techfree.com.br&amp;#8221; que já está configurado nesse arquivo.&lt;br /&gt;
Blogs DevOps.&lt;/p&gt;
&lt;p&gt;Seu pedido será avaliado, e caso aceito, seu blog será automaticamente consultado e as postagens sobre DevOps aparecerão aqui no planet.&lt;/p&gt;
&lt;p&gt;Atenção! Caso seu blog não seja apenas sobre DevOps, em seu cadasto coloque o endereço feed da categoria que utiliza em seu blog para falar sobre devops. Assim apenas o conteúdo de DevOps será enviado para o planet, evitando textos sobre outro assunto no planet.&lt;/p&gt;
&lt;p&gt;Para facilitar nossa convivência no planet, temos algumas regras simples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Seja cordial em suas postagens.&lt;/li&gt;
&lt;li&gt;Evite palavrões&lt;/li&gt;
&lt;li&gt;Evite fugir do assunto do texto&lt;/li&gt;
&lt;li&gt;Evite copiar texto sem sua devida permissão&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2015-05-25T02:00:37+00:00</dc:date>
</item>
<item rdf:about="http://cloud/2015/05/23/A_verdade_que_ninguem_nunca_contou_a_voce_sobre_Cloud_Computing/">
	<title>Wagner Souza: A verdade que ninguém nunca contou a você sobre Cloud Computing</title>
	<link>http://cloud/2015/05/23/A_verdade_que_ninguem_nunca_contou_a_voce_sobre_Cloud_Computing/</link>
	<content:encoded>&lt;p&gt;Conversando com amigos da área de Tecnologia da Informação e lendo muitos artigos, percebi que todos vendem Cloud Computing (conhecido também em português como computação na nuvem) com uma idéia matadora de simples implementação, que vai resolver todos os problemas das empresas, mas ninguém diz como, e muito menos a que custo.&lt;/p&gt;

&lt;p&gt;Cloud é sim uma idéia revolucionária que agrega valor as empresas, mas ainda é um conceito muito novo, e que gera muitos desafios, e alguns ainda não resolvidos plenamente pelos grande players do mercado mundial.&lt;/p&gt;

&lt;p&gt;Muita coisa deve ser levado em conta na hora de encarar esse novo desafio, além do lado técnico e financeiro, existe o fato de ser uma grande mudança de paradigma, exigindo grandes esforços de todas as áreas técnicas e também gestão de TI das empresas.&lt;/p&gt;

&lt;p&gt;Ir para o modelo de Cloud exige uma mudança para um modelo de serviços, que traz atrelado a ele uma serie de mudanças na forma como as empresas lidam e interagem com as áreas de TI. &lt;/p&gt;

&lt;p&gt;Oferecer os recursos de TI como serviço significa tirar das mãos das áreas de infra estrutura o controle sobre o consumo de tais recursos e passar para as áreas de produto e desenvolvimento das empresas. Sair de um modelo de rateio para um modelo onde cada um paga pelo seu.&lt;/p&gt;

&lt;p&gt;Isso muda completamente a forma de trabalho das áreas de TI mas gera também mais transparência e controle da utilização dos recursos.&lt;/p&gt;

&lt;p&gt;Adotando esse modelo, as áreas de desenvolvimento e produtos passam a saber exatamente o que estão consumindo de infra estrutura, o que no modelo tradicional é praticamente impossível de saber, já que a utilização geralmente é dividida entre todas as áreas das empresas.&lt;/p&gt;

&lt;p&gt;Já a área de infra estrutura, passa a ter um papel de “vendedor” de recursos de TI. E disponibilizar o recurso significa oferecer uma interface web, command line e ou APIs para que os consumidores consigam seus recursos de forma automatizada. Impacto também na gestão de infra estrutura que terá que se adequar a esse novo modelo de gestão.&lt;/p&gt;

&lt;p&gt;Em resumo, mudar para o modelo de cloud é uma boa idéia, mas é bem mais complexo que se parece, ou da forma como é vendido, hoje já existem vários projetos opensource que podem ajudar nessa nova jornada, e também produtos comerciais, mas a grande maioria ainda em fase de evolução, ou seja falta um pouco ainda para que tenhamos um solução fechado de ponta a ponta, rodando redondinho.&lt;/p&gt;

&lt;p&gt;Nos próximos posts, vou exemplificar como seria o fluxo de migração para o modelo de Cloud, que ferramentas existem e como elas podem ajudar nesse processo.&lt;/p&gt;</content:encoded>
	<dc:date>2015-05-23T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://techfree.com.br/?p=230">
	<title>Gomex: Docker – Mapeamento de portas (Vídeo)</title>
	<link>http://techfree.com.br/2015/05/docker-mapeamento-de-portas-video/</link>
	<content:encoded>&lt;p&gt;Nesse vídeo você verá como é possível acessar os serviços hospedados nos containers docker por diversas formas.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2015-05-18T03:04:33+00:00</dc:date>
</item>
<item rdf:about="http://techfree.com.br/?p=222">
	<title>Gomex: Lançamento do 1.6.1 Docker com várias correções de segurança</title>
	<link>http://techfree.com.br/2015/05/lancamento-do-1-6-1-docker-com-varias-correcoes-de-seguranca/</link>
	<content:encoded>&lt;p&gt;Após diversas notificações de vulnerabilidades urgentes, a equipe de segurança do Docker resolveu lançar rapidamente uma nova versão com soluções para os casos reportados.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://techfree.com.br/wp-content/uploads/2015/05/google-container-logo-370x290.jpg&quot;&gt;&lt;img class=&quot; size-medium wp-image-223 aligncenter&quot; src=&quot;http://techfree.com.br/wp-content/uploads/2015/05/google-container-logo-370x290-300x235.jpg&quot; alt=&quot;google-container-logo-370x290&quot; width=&quot;300&quot; height=&quot;235&quot; /&gt;&lt;/a&gt;Segue abaixo as falhas encontradas, que já foram resolvidas na versão 1.6.1:&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-222&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;[CVE-2015-3629] Symlink traversal on container respawn allows local privilege escalation&lt;/h3&gt;
&lt;p&gt;O libcontainer da versão 1.6.0 introduziu mudanças que facilitaram a fuga da montagem do namespace no respawn do container. Isso permite que imagens maliciosas possam escrever arquivos no sistema host, ou seja, que escape do container.&lt;/p&gt;
&lt;p&gt;Descoberto por Tõnis Tiigi.&lt;/p&gt;
&lt;h3&gt;[CVE-2015-3627] Insecure opening of file-descriptor 1 leading to privilege escalation&lt;/h3&gt;
&lt;p&gt;O file descriptor passado pelo libcontainer para o processo com PID 1 do container foi encontrado com possibilidade de ser aberto antes de ser executado o chroot, sendo assim permitindo abertura insegura de symlink traversal. Isso permite que containers maliciosos possam escalar o privilégio localmente.&lt;/p&gt;
&lt;p&gt;Descoberto por Tõnis Tiigi.&lt;/p&gt;
&lt;h3&gt;[CVE-2015-3630] Read/write proc paths allow host modification &amp;amp; information disclosure&lt;/h3&gt;
&lt;p&gt;Muitos caminhos abaixo de /proc estavam com permissão de escrita para o container, permitindo a manipulação de configurações globais do sistema. Esses caminhos incluíam /proc/asound, /proc/timer_stats, /proc/latency_stats, e /proc/fs.&lt;/p&gt;
&lt;p&gt;Ao permite escrita no /proc/fs, verificou-se que volumes CIFS podem ser forçados a um &amp;#8220;protocol downgrade attack&amp;#8221; por um usuário root no sistema operacional dentro do container.&lt;/p&gt;
&lt;p&gt;Descoberto por Eric Windisch do time de segurança do Docker&lt;/p&gt;
&lt;h3&gt;[CVE-2015-3631] Volume mounts allow LSM profile escalation&lt;/h3&gt;
&lt;p&gt;Ao permitir que volumes possam sobrescrever arquivos do /proc dentro de um namespace, um usuário pode específicar arbitrariamente politicas para o módulo de segurança do Linux, incluindo setar uma política de não-confinada sob o AppArmonr ou uma política &amp;#8220;docker_t&amp;#8221; que seria gerenciada pelo SELinux.&lt;/p&gt;
&lt;p&gt;Descoberto por Eric Windisch do time de segurança do Docker&lt;/p&gt;
&lt;p&gt;Todas as falhas foram corrigidas no Docker 1.6.1! Usuários que utilizam imagens inseguras estão encorajados a atualizar o seu docker urgentemente.&lt;/p&gt;
&lt;h3&gt;Atualizando seu Docker no Debian&lt;/h3&gt;
&lt;p&gt;É muito simples, basta executar os comandos abaixo:&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
# wget http://ftp.br.debian.org/debian/pool/main/d/docker.io/docker.io_1.6.1+dfsg1-1_amd64.deb&lt;br /&gt;
# dpkg -i docker.io_1.6.1+dfsg1-1_amd64.deb&lt;br /&gt;
# rm docker.io_1.6.1+dfsg1-1_amd64.deb&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2015-05-10T03:43:29+00:00</dc:date>
</item>
<item rdf:about="http://www.ricardomartins.com.br/?p=5700">
	<title>Ricardo Martins: CoreOS: O que é e como funciona?</title>
	<link>http://www.ricardomartins.com.br/coreos-o-que-e-e-como-funciona/</link>
	<content:encoded>&lt;p&gt;Em tempos de computação em nuvem, micro serviços e containers, o CoreOS é uma distribuição Linux que vem ganhando força. Neste post vou compartilhar um pouco do que tenho estudado e descoberto sobre ele com vocês. O CoreOS é um sistema operacional Linux desenvolvido para ser tolerante à falhas, distribuído e fácil de escalar. Ele [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;O post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br/coreos-o-que-e-e-como-funciona/&quot;&gt;CoreOS: O que é e como funciona?&lt;/a&gt; apareceu primeiro em &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br&quot;&gt;Ricardo Martins&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-05-05T22:05:52+00:00</dc:date>
</item>
<item rdf:about="http://techfree.com.br/?p=218">
	<title>Gomex: O que é docker? (Vídeo)</title>
	<link>http://techfree.com.br/2015/05/o-que-e-docker-video/</link>
	<content:encoded>&lt;p&gt;A ideia é demonstrar o que é Docker, principalmente para aquelas pessoas que ainda não conhecem e não perceberam ainda como isso pode ser interessante para suas atividades.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Por hoje é só! Fiquem atentos para novas postagens sobre &lt;a href=&quot;http://techfree.com.br/category/devops/&quot; target=&quot;_blank&quot;&gt;DevOps&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-05-02T11:17:41+00:00</dc:date>
</item>
<item rdf:about="http://techfree.com.br/?p=213">
	<title>Gomex: Monitorando automaticamente o Docker com Zabbix</title>
	<link>http://techfree.com.br/2015/04/monitorando-automaticamente-o-docker-com-zabbix/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; é uma ferramenta perfeita para criar automaticamente ambientes para novos serviços. Esse processo de criação é muito fácil e em alguns casos é feita automaticamente por outra ferramenta ou script.&lt;/p&gt;
&lt;div id=&quot;attachment_205&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;http://techfree.com.br/wp-content/uploads/2015/04/static1.squarespace.com_.jpeg&quot;&gt;&lt;img class=&quot;wp-image-205 size-full&quot; src=&quot;http://techfree.com.br/wp-content/uploads/2015/04/static1.squarespace.com_.jpeg&quot; alt=&quot;static1.squarespace.com&quot; width=&quot;599&quot; height=&quot;351&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Monitore para evitar surpresas&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Problemas podem acontecer e a equipe de TI precisa estar preparada para descobrir isso antes que cause indisponibilidade.&lt;/p&gt;
&lt;h3&gt;Problema&lt;/h3&gt;
&lt;p&gt;Como o time de monitoramento poderá acompanhar esse rápido processo de criação e manter todos esses ativos no sistema de monitoramento? Nos precisamos monitorar automaticamente todos os containers.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-213&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Eu &lt;a href=&quot;https://github.com/gomex/docker-zabbix&quot; target=&quot;_blank&quot;&gt;desenvolvi alguns scripts&lt;/a&gt; para listar containers, adicionar eles no Zabbix usando a funcionalidade LLD e monitorar todos esses novos hosts.&lt;/p&gt;
&lt;p&gt;Infelizmente nos precisamos de acesso especial para monitorar essas informações no Docker, por conta disso eu usei sudo e job cron do root.&lt;/p&gt;
&lt;p&gt;Abaixo os itens monitorados por essa solução:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Porcentagem de CPU usado&lt;/li&gt;
&lt;li&gt;Porcentagem de memória usada&lt;/li&gt;
&lt;li&gt;Bytes enviados e recebidos por segundo&lt;/li&gt;
&lt;li&gt;Pacotes enviados e recebidos&lt;/li&gt;
&lt;li&gt;Pacotes enviados e recebidos, mas descartados&lt;/li&gt;
&lt;li&gt;Pacotes enviados e recebidos com erros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quer conhecer a solução antes de testar? Olhe esse vídeo!&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Eu testei no seguinte ambiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python 2.7.9&lt;/li&gt;
&lt;li&gt;docker 1.6&lt;/li&gt;
&lt;li&gt;zabbix agent and server 2.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se você testar em um diferente, por favor me avise.&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-27T00:59:11+00:00</dc:date>
</item>
<item rdf:about="http://gutocarvalho.net/octopress/2015/04/24/treinamento-puppet-fundamentals-em-brasilia">
	<title>Guto Carvalho: Treinamento Puppet Fundamentals em Brasília</title>
	<link>http://gutocarvalho.net/octopress/2015/04/24/treinamento-puppet-fundamentals-em-brasilia/</link>
	<content:encoded>&lt;p&gt;&lt;strong&gt;Puppet Fundamentals&lt;/strong&gt;&lt;br /&gt;
23, 24 e 25 de Junho de 2015&lt;br /&gt;
&lt;strong&gt;Horário:&lt;/strong&gt; 09:00 às 18:00&lt;br /&gt;
&lt;strong&gt;Local:&lt;/strong&gt; Brasília/DF&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Data marcada!&lt;/p&gt;

&lt;p&gt;Saiba mais sobre o treinamento:&lt;/p&gt;

&lt;p&gt;=&gt; https://puppetlabs.com/services/training/puppet-fundamentals&lt;br /&gt;
=&gt; http://instruct.com.br/calendario.html&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Eu serei o instrutor :)&lt;/p&gt;

&lt;p&gt;[s]&lt;br /&gt;
Guto&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-24T18:22:00+00:00</dc:date>
</item>
<item rdf:about="http://techfree.com.br/?p=186">
	<title>Gomex: Lançamento do Docker 1.6</title>
	<link>http://techfree.com.br/2015/04/lancamento-do-docker-1-6/</link>
	<content:encoded>&lt;p&gt;O Docker continua crescendo muito rápido e com pouco mais de 2 meses, lança uma nova versão recheada de novidades.&lt;/p&gt;
&lt;p&gt;Entre as novidades desse lançamento temos: Label para containers, cliente Docker para Windows, driver para log. Isso sem contar com os lançamentos do compose 1.2, Swarm 0.2 e machine 0.2. Vamos detalhar um pouco esse mega release.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://techfree.com.br/wp-content/uploads/2015/04/docker-whales-transparent.png&quot;&gt;&lt;img class=&quot; size-medium wp-image-188 aligncenter&quot; src=&quot;http://techfree.com.br/wp-content/uploads/2015/04/docker-whales-transparent-300x250.png&quot; alt=&quot;docker-whales-transparent&quot; width=&quot;300&quot; height=&quot;250&quot; /&gt;&lt;/a&gt;&lt;span id=&quot;more-186&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Label para containers&lt;/h3&gt;
&lt;p&gt;Esse recurso é muito interessante a nível de organização e agrupamento. Uma vez que as tags tem um papel quase como &amp;#8220;versionamento&amp;#8221;, as labels assumem a marcação que pode incluir &amp;#8220;assuntos&amp;#8221;, &amp;#8220;funcionalidades&amp;#8221;, &amp;#8220;ambiente&amp;#8221; e afins nos containers. Pode parecer pouca coisa para quem usa o Docker para uma situação específica, mas para grandes soluções é uma ajuda e tanto.&lt;/p&gt;
&lt;p&gt;Quer aprender a usar? Leia &lt;a href=&quot;http://rancher.com/docker-labels/&quot; target=&quot;_blank&quot;&gt;aqui.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Cliente Docker para Windows&lt;/h3&gt;
&lt;p&gt;Finalmente parece que a Microsoft conseguiu entrar em alguma tendência no momento certo, pois está apostando fortemente no Docker. A demonstração disso foi a submissão de &lt;a href=&quot;https://github.com/docker/docker/pulls?q=is%3Apr+author%3Aahmetalpbalkan+is%3Aclosed&quot; target=&quot;_blank&quot;&gt;70 pull requests&lt;/a&gt;. Assim como no MAC, O Windows somente poderá ser utilizado como cliente remoto que deve ser conectar a um Docker &amp;#8220;Server&amp;#8221;, que ainda é só pode ser instalado nativamente apenas no GNU/Linux.&lt;/p&gt;
&lt;p&gt;Muitos amantes do GNU/Linux podem ficar tristes com essa declaração, mas a grande funcionalidade do Docker que é &amp;#8220;Faça uma vez, rode em qualquer lugar&amp;#8221; talvez dependa desse suporte nativo mais amplo da Microsoft. Isso levando em consideração que ela cumpra sua promessa de manter a compatibilidade.&lt;/p&gt;
&lt;p&gt;Você pode ler mais sobre isso no &lt;a href=&quot;http://azure.microsoft.com/blog/2015/04/16/docker-client-for-windows-is-now-available&quot; target=&quot;_blank&quot;&gt;blog da Azure.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Driver para log&lt;/h3&gt;
&lt;p&gt;Tem havido um número crescente de propostas para uma API de registro que lhe permitiria enviar logs de containers para outros sistemas, como Syslog ou um terceiro. Esse novo driver de log  segue o mesmo conceito de storage e exec já presente no Docker.&lt;/p&gt;
&lt;p&gt;A opção docker run &amp;#8211;log-driver tem três possibilidades:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;json-file (padrão)&lt;/strong&gt;: Que é basicamente o que já usado no Docker atualmente. Todos os logs dos containers são armazenados na pasta /var/lib/docker/containers/&amp;lt;Containers ID&amp;gt;/&amp;lt;container id&amp;gt;-json.log&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;syslog: &lt;/strong&gt;Como o próprio nome já revela, é uma forma de enviar esse log via syslog do host &amp;#8220;hospedeiro&amp;#8221;. Veja como funciona:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;# docker run -d &amp;#8211;log-driver=syslog gomex/debian:padrao echo &amp;#8220;Hello&amp;#8221;&lt;br /&gt;
c2ed7a98583c82a90111ffba5fb89e73dcd6e681a03c921da538a84ffd7216d0&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No /var/log/syslog estará assim:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Apr 17 23:29:18 gondor docker[15432]: c2ed7a98583c: Hello&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Perceba que temos tanto o nome aplicação docker como o ID resumido do container, o que é o suficiente para fazer uma boa gerência desse log. Ótimo para quem deseja minimizar o máximo de processos em execução no container, mas não abre mão de um log centralizado e organizado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;none: &lt;/strong&gt;Como o próprio nome também já revela, é uma forma de não gerar log do container para o host &amp;#8220;hospedeiro&amp;#8221;. Essa opção é ótima para containers que geram logs desnecessários.&lt;/p&gt;
&lt;h3&gt;Outros lançamentos&lt;/h3&gt;
&lt;p&gt;A comunidade Docker promoverá alguns Meetups para apresentação das novidades do &lt;a href=&quot;http://www.meetup.com/Docker-Online-Meetup/events/221879788/&quot; target=&quot;_blank&quot;&gt;Swarm&lt;/a&gt;, &lt;a href=&quot;http://www.meetup.com/Docker-Online-Meetup/events/221879950/&quot; target=&quot;_blank&quot;&gt;Compose&lt;/a&gt; e &lt;a href=&quot;http://www.meetup.com/Docker-Online-Meetup/events/221878668/&quot; target=&quot;_blank&quot;&gt;Machine&lt;/a&gt;. Não perca!&lt;/p&gt;
&lt;h3&gt;Referência:&lt;/h3&gt;
&lt;p&gt;https://blog.docker.com/2015/04/docker-release-1-6/&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-20T09:12:28+00:00</dc:date>
</item>
<item rdf:about="http://gutocarvalho.net/octopress/2015/04/15/perguntas-pontuais-devops">
	<title>Guto Carvalho: Perguntas Pontuais DevOps</title>
	<link>http://gutocarvalho.net/octopress/2015/04/15/perguntas-pontuais-devops/</link>
	<content:encoded>&lt;p&gt;Recebi um e-mail com perguntas interessantes sobre o conceito DevOps e automação, vou publicar as perguntas e as respostas pois são questões recorrentes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) O DevOps pode ajudar na redução de custos de operação de infraestrutura?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sim, adotando uma nova metodologia de trabalho e colaboração, com amplo feedback entre os times torna tudo mais simples, os projetos vão andar mais rápido, as pessoas vão se comunicar melhor, a qualidade do trabalho será maior, as entregas vão ocorrer em janelas menores.&lt;/p&gt;

&lt;p&gt;Só tome cuidado para não confundir DevOps com infraestrutura ágil ou automação. DevOps é um conceito muito mais amplo que envolve e integra desenvolvimento, qualidade, infraestrutura e operação. A operação não trabalha mais sozinha ou isolada, ela se integra e se enxerga como parte de um único time de TI responsável por fazer o negócio de seu cliente fluir e prosperar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) A automação,  autohealing  e infraestrutura como código  pode trazer redução de custos?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sim, porém automação não tem foco único em reduzir custos, tem foco em manter seu negócio funcionando e fluindo.&lt;/p&gt;

&lt;p&gt;Ao automatizar processos, procedimentos, rotinas e tarefas, sua equipe para de fazer trabalho repetitivo e pode focar em projetos, melhorias, capacitação, inovação. Sobra tempo para fazer outras coisas, você faz mais, em menos tempo, de forma controlada e melhor.&lt;/p&gt;

&lt;p&gt;Automatizar significa manter a integridade e a saúde do seu ambiente.&lt;/p&gt;

&lt;p&gt;Automatizar significa maior controle de suas mudanças.&lt;/p&gt;

&lt;p&gt;Automatizar significa mudanças rápidas e precisas.&lt;/p&gt;

&lt;p&gt;Automatizar significa reduzir falhas humanas.&lt;/p&gt;

&lt;p&gt;Sua equipe vai trabalhar menos, produzir e aumentar sua qualidade.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Automatizar significa redução da equipe ou substituição de algum profissional da minha equipe?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;De forma alguma. Sua equipe vai conseguir fazer muito mais com automação. Automação não significa redução de equipe, significa ampliação de capacidade de trabalho, fazendo isto com qualidade e controle, utilizando o máximo das tecnologias existentes.&lt;/p&gt;

&lt;p&gt;Você vai na realidade aposentar processos arcaicos e repetivos, capacitar sua equipe, evoluir processos e métodos, transformar seu modelo clássico em um modelo mordeno e funcional de gestão de infraestrutura.&lt;/p&gt;

&lt;p&gt;Se antes um membro da equipe conseguia gerir no máximo 15 hosts com qualidade, com automação ele conseguirá cuidar de 3000 com segurança.&lt;/p&gt;

&lt;p&gt;Sua equipe vai trabalhar menos pois seu ambiente vai funcionar melhor e de forma mais precisa.&lt;/p&gt;

&lt;p&gt;A disponibilidade do negócio se estabiliza e atingirá novos patamares.&lt;/p&gt;

&lt;p&gt;[s]&lt;br /&gt;
Guto&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-15T12:59:00+00:00</dc:date>
</item>
<item rdf:about="http://techfree.com.br/?p=130">
	<title>Gomex: Criação automatizada de imagens Docker (GitHub e Docker Hub)</title>
	<link>http://techfree.com.br/2015/04/criacao-automatizada-de-imagens-docker-github-e-docker-hub/</link>
	<content:encoded>&lt;p&gt;Como expliquei no &lt;a href=&quot;http://techfree.com.br/2015/03/criando-imagens-docker-dockerfile&quot; target=&quot;_blank&quot;&gt;artigo anterior sobre Docker&lt;/a&gt;, o processo de criação de imagens no Docker é bem simples, mas requer algum esforço e acompanhamento para saber se ele concluiu corretamente e esse resultado será visualizado em linha de comando, normalmente imagem a imagem. Um trabalha &amp;#8220;manual&amp;#8221;.&lt;/p&gt;
&lt;h2&gt;Criação em massa&lt;/h2&gt;
&lt;p&gt;Quando você trabalha com muitas imagens, e a mudança dessas imagens é constante, você precisará de uma solução mais automatizada e de um processo mais simples pra viabilizar a criação dessas imagens. É nesse momento que entra o serviço de automatização de criação das imagens do Docker Hub junto ao GitHub.&lt;/p&gt;
&lt;div id=&quot;attachment_131&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;http://techfree.com.br/wp-content/uploads/2015/03/1b19931164e4185f26aa8013a1c483ae.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-131&quot; src=&quot;http://techfree.com.br/wp-content/uploads/2015/03/1b19931164e4185f26aa8013a1c483ae-300x180.png&quot; alt=&quot;Docker e GitHub, agora juntos! :)&quot; width=&quot;300&quot; height=&quot;180&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Docker e GitHub, Juntos! :)&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;&lt;span id=&quot;more-130&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Automação de builds&lt;/h2&gt;
&lt;p&gt;O Docker Hub tem um serviço de Automação da criação de imagens (Build), com integração com GitHub, ou seja, toda vez que você efetuar um commit e push no Dockerfile do seu repositório será realizado automaticamente um novo build da imagem, já armazenando no Docker Hub e apresentando o log de criação dessa imagem. Praticamente uma integração contínua da sua imagem &lt;img src=&quot;http://techfree.com.br/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_182&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;a href=&quot;http://techfree.com.br/wp-content/uploads/2015/04/Seleção_001.png&quot;&gt;&lt;img class=&quot;wp-image-182 size-full&quot; src=&quot;http://techfree.com.br/wp-content/uploads/2015/04/Seleção_001.png&quot; alt=&quot;Seleção_001&quot; width=&quot;969&quot; height=&quot;559&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Olha como é fácil a interface!&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Para configurar isso é muito simples. Basta seguir os passos abaixo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crie uma &lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot;&gt;Conta no Docker Hub&lt;/a&gt; e efetue login.&lt;/li&gt;
&lt;li&gt;Link sua conta do GitHub através do menu &lt;a href=&quot;https://registry.hub.docker.com/account/accounts/&quot; target=&quot;_blank&quot;&gt;&amp;#8220;Link Accounts&amp;#8221;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://registry.hub.docker.com/builds/add/&quot; target=&quot;_blank&quot;&gt;Configure o build automatizado&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Escolha o projeto GitHub que deseja utilizar. Lembre-se que ele precisa ter um &lt;code&gt;Dockerfile&lt;/code&gt; para efetuar a build.&lt;/li&gt;
&lt;li&gt;Escolha a branch que você quer efetuar a build (Por padrão é usada a branch &lt;code&gt;master&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Dê um nome a esse build automatizado.&lt;/li&gt;
&lt;li&gt;Opcionalmente, aplique uma tag Docker tag para a build.&lt;/li&gt;
&lt;li&gt;Especifique onde o &lt;code&gt;Dockerfile&lt;/code&gt; está localizado. O padrão é &amp;#8220;&lt;code&gt;/&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Uma vez o build automatizado é configurado ele será ativado automaticamente e em poucos minutos você pode visualizar sua imagem &lt;a href=&quot;https://hub.docker.com&quot; target=&quot;_blank&quot;&gt;Docker Hub&lt;/a&gt;. Ela será mantida sincronizada com base no Dockerfile do seu repositório GitHub até que você desative o Build automatizado em questão.&lt;/p&gt;
&lt;h2&gt;Visualizando a situação da build&lt;/h2&gt;
&lt;p&gt;Se você quiser visualizar a situação do seu build automatizado, basta acessa o menu &amp;#8220;&lt;a href=&quot;https://registry.hub.docker.com/builds/&quot; target=&quot;_blank&quot;&gt;Build detail&amp;#8221;&lt;/a&gt; na sua imagem dentro da sua conta do Docker Hub, assim conseguirá visualizar o status da sua build e todo o histórico.&lt;/p&gt;
&lt;h2&gt;Como funciona a atualização&lt;/h2&gt;
&lt;p&gt;Vale lembrar que você o build automatizado não será ativado com o comando &amp;#8220;&lt;code&gt;docker push&quot;&lt;/code&gt;, você apenas poderá enviar modificação, e por consequência efetuar automaticamente o build dessa imagem, através do git commit e push para o repositório previamente configurado no link entre GitHub e Docker Hub.&lt;/p&gt;
&lt;p&gt;Você pode criar múltiplos builds automatizados por repositório e configurar ele para apontar para um específico Dockerfile ou branch diferente.&lt;/p&gt;
&lt;h3 id=&quot;build-triggers&quot;&gt;Build Triggers&lt;/h3&gt;
&lt;p&gt;É possível ativar o build automatizado a partir de uma url. Basta habilitar o &amp;#8220;Build triggers&amp;#8221; em sua build automatizada. Agora você conseguirá gerar uma build por demanda e não apenas com base em commit e push. &lt;img src=&quot;http://techfree.com.br/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;build-triggers&quot;&gt;Atenção!&lt;/h3&gt;
&lt;p&gt;Vale a pena lembrar que todo processo descrito aqui não leva em consideração repositórios e imagens privadas. Caso seja sua situação de não publicizar esse trabalho, tenha cuidado com relação a isso.&lt;/p&gt;
&lt;h2&gt;Referência&lt;/h2&gt;
&lt;p&gt;https://docs.docker.com/userguide/dockerrepos/&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-13T11:40:40+00:00</dc:date>
</item>
<item rdf:about="http://gutocarvalho.net/octopress/2015/04/10/treinamento-architect-em-san-jose-slash-ca">
	<title>Guto Carvalho: Treinamento Architect em San Jose/CA</title>
	<link>http://gutocarvalho.net/octopress/2015/04/10/treinamento-architect-em-san-jose-slash-ca/</link>
	<content:encoded>&lt;p&gt;Este ano eu estive em &lt;em&gt;San Jose/CA&lt;/em&gt; e participei do novo treinamento Puppet Architect da Puppetlabs. O treinamento foi ministrado por um instrutor da Puppetlabs.&lt;/p&gt;

&lt;p&gt;É importante mencionar que todos os treinamentos nos &lt;em&gt;Estados Unidos da América&lt;/em&gt; são ministrados por instrutores que são funcionários da Puppetlabs, já em outros países, normalmente são os parceiros que ministram estes cursos, como ocorre aqui no Brasil com a Instruct.&lt;/p&gt;

&lt;p&gt;Instrutores que são funcionários de parceiros precisam fazer todos os cursos oficiais, se certificar (PCP) e participar e de um treinamento específico para instrutores ministrado pelo time de educação da Puppetlabs.&lt;/p&gt;

&lt;p&gt;No curso de San Jose havia apenas dois brasileiros, eu e o Miguel Filho. O curso foi bem interessante, a pegada deles no curso é bem diferente da nossa didática de aulas no Brasil, foi curioso ver que eles não gostam de improvisar, dar asas a criatividade, testar novas soluções, eles seguem certinho o material, excutam os exemplos e as soluções a risca.&lt;/p&gt;

&lt;p&gt;Culturas diferentes, metodologias diferentes. Eu já gosto de estimular em meus  alunos o pensamento fora da caixinha, quero que eles enxerguem novas soluções, novas abordagens, novos caminhos para resolver labs, indo além do material, isso parece funcionar muito bem aqui no Brasil :)&lt;/p&gt;

&lt;p&gt;O material continua com nível técnico muito alto, exemplos bem interessantes, cenários que refletem a realidade de muitos tipos de clientes que atendemos no Sul e Sudeste.&lt;/p&gt;

&lt;p&gt;A nova abordagem de cenários Monolíticos, Dispersos e Dispersos com Multi Master é incrível, está muito fácil criar diversos servidores Puppet Master e distribuir isso em sua rede, basta fazer a classificação de um node com uma classe específica e pronto, novo master atendendo.&lt;/p&gt;

&lt;p&gt;Recomendo o curso para quem deseja aprender a escalar seu ambiente do jeito certo - entendendo o planejamento de capacidade com puppet, classificar nodes de forma personalizada - escrevendo seu próprio classificador, estender o uso do HIERA, utilizar HIERA com criptografia, utilizar o R10K para gerenciar ambientes com GIT, usar o Mcollective sem frontend, interagir com APIs do Puppet e PuppetDB, entender e utilizar exported resources na prática, dentre muitas outras coisas.&lt;/p&gt;

&lt;p&gt;O curso valeu muito, pelo conteúdo, pelo instrutor, por entender a dinâmica e a metodologia da Puppetlabs, pela viagem e pelo investimento, que se paga fácilmente ao aplicá-lo nos clientes que temos no Brasil.&lt;/p&gt;

&lt;p&gt;Como já participei do treinamento de instrutores, agora estou apto a ministrar esse treinamento no Brasil, em breve vamos definir uma data e divulgar.&lt;/p&gt;

&lt;p&gt;[s]&lt;br /&gt;
Guto&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-10T15:51:00+00:00</dc:date>
</item>
<item rdf:about="http://gutocarvalho.net/octopress/2015/04/09/1o-treinamento-puppet-fundamentals-em-porto-alegre">
	<title>Guto Carvalho: 1o Treinamento Puppet Fundamentals em Porto Alegre</title>
	<link>http://gutocarvalho.net/octopress/2015/04/09/1o-treinamento-puppet-fundamentals-em-porto-alegre/</link>
	<content:encoded>&lt;p&gt;&lt;strong&gt;Puppet Fundamentals&lt;/strong&gt;&lt;br /&gt;
09, 10 e 11 de Junho de 2015&lt;br /&gt;
&lt;strong&gt;Horário:&lt;/strong&gt; 09:00 às 18:00&lt;br /&gt;
&lt;strong&gt;Local:&lt;/strong&gt; Porto Alegre/RS&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Informações:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://puppetlabs.com/events/porto-alegrers-puppet-fundamentals-sponsored-instruct-brazil&quot;&gt;https://puppetlabs.com/events/porto-alegrers-puppet-fundamentals-sponsored-instruct-brazil&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.unirede.net/treinamentos/treinamento-puppet-fundamentals/&quot;&gt;http://www.unirede.net/treinamentos/treinamento-puppet-fundamentals/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No curso Fundamenals, o aluno irá entender como funciona o Puppet, vai descobrir como tudo começou, qual foi a motivação para ele ser criado, como a PuppetLabs surgiu, o aluno verá aspectos fundamentais de gerência de configurações, aspectos históricos e culturais de administração de servidores e tudo isto o levará a conhecer o Puppet Enterprise.&lt;/p&gt;

&lt;p&gt;O curso é 50% prático e 50% teórico, nele você vai aprender como trabalhar com o puppet em modo local (apply) e em modo cliente e servidor (master), vai entender a camada de abstração, vai conhecer, entender e utilizar a DSL do Puppet, vai entender, utilizar e construir módulos e classes, vai aprender, entender e fazer a classificação de nodes, vai conhecer e utilizar os principais recursos do puppet (resource types), vai entender como funcionam relacionamentos e a construção da linguagem.&lt;/p&gt;

&lt;p&gt;Toda a construção das classes dos módulos será versionada, durante todo o curso será utilizado o GIT como ferramenta de versionamento, haverá inclusive uma introdução ao GIT para nivelar os alunos.&lt;/p&gt;

&lt;p&gt;O curso vai abordar além de tudo isto, templates, defined resource types, parameterized classes, herança, separação de código e dados com HIERA, utilização de módulos do PuppetForge dentre muitos outros assuntos interessantes.&lt;/p&gt;

&lt;p&gt;A cada tópico que o aluno completar, um laboratório será executado proposto, possibilitando que ele já aplique o que acabou e estudar e aprender, essa abordagem é bem interessante e produtiva.&lt;/p&gt;

&lt;p&gt;[s]&lt;br /&gt;
Guto&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-09T21:06:00+00:00</dc:date>
</item>
<item rdf:about="http://www.ricardomartins.com.br/?p=5661">
	<title>Ricardo Martins: Docker: Criando suas próprias imagens – Parte III/III</title>
	<link>http://www.ricardomartins.com.br/docker-criando-suas-proprias-imagens/</link>
	<content:encoded>&lt;p&gt;O post de hoje é pra mostrar como criar suas imagens do docker, publicá-las no Docker Hub (Registry) e depois usar/disponibilizar onde precisar. O primeiro passo é instalar o docker: &amp;#91;root@rmartins /&amp;#93;# yum install docker-io Loaded plugins: fastestmirror Setting up Install Process Loading mirror speeds from cached hostfile * base: mirror.nbtelecom.com.br * epel: mirror.globo.com * [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;O post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br/docker-criando-suas-proprias-imagens/&quot;&gt;Docker: Criando suas próprias imagens &amp;#8211; Parte III/III&lt;/a&gt; apareceu primeiro em &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br&quot;&gt;Ricardo Martins&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-08T23:02:43+00:00</dc:date>
</item>
<item rdf:about="http://techfree.com.br/?p=111">
	<title>Gomex: Criando imagens Docker (Dockerfile)</title>
	<link>http://techfree.com.br/2015/04/criando-imagens-docker-dockerfile/</link>
	<content:encoded>&lt;p&gt;No &lt;a href=&quot;http://techfree.com.br/2015/03/modificando-e-distribuindo-maquinas-docker/&quot; target=&quot;_blank&quot;&gt;artigo anterior&lt;/a&gt; sobre Docker, eu expliquei como modificar uma imagem docker usando &lt;strong&gt;COMMIT&lt;/strong&gt;, mas propositalmente não comentei que essa não é a melhor prática &lt;img src=&quot;http://techfree.com.br/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; Evitei tocar nesse assunto para não frustrar o aprendizado, pois é necessário aprender como funciona o &lt;strong&gt;COMMIT&lt;/strong&gt;, com &lt;strong&gt;DIFF&lt;/strong&gt; e afins.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://techfree.com.br/wp-content/uploads/2015/03/docker1.png&quot;&gt;&lt;img class=&quot; wp-image-113 size-medium aligncenter&quot; src=&quot;http://techfree.com.br/wp-content/uploads/2015/03/docker1-300x148.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;148&quot; /&gt;&lt;/a&gt;A melhor forma de modificar uma imagem Docker é recriando ela, ou seja, modificando seu Dockerfile, ou criando um Dockerfile novo tendo a imagem escolhida como base e nesse artigo falaremos sobre tudo isso.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-111&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;Dockerfile é um arquivo, que contém um conjunto de instruções necessárias para se criar uma imagem Docker, ou seja, com posse do Dockerfile de uma determinada imagem, basta modificar o que deseja e recriar a imagem &amp;#8220;do zero&amp;#8221;, isso pode demorar um pouco mais, mas essa imagem será muito mais &amp;#8220;enxuta&amp;#8221; e você terá controle total do seu estado, o que seria bem mais difícil no modelo de efetuar commit de um container.&lt;/p&gt;
&lt;p&gt;Caso não tenha o Dockerfile, você pode usar uma imagem a sua escolha como base e então criar a sua imagem como uma camada acima.&lt;/p&gt;
&lt;h2&gt;Sintaxes básicas&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;FROM :&lt;/strong&gt; É a imagem base. Normalmente é usada com nome de distribuição (Debian, Ubuntu e afins), pois não precisaremos criar toda estrutura, certo?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MAINTAINER :&lt;/strong&gt; É onde se especifica o autor da imagem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RUN :&lt;/strong&gt; São as instruções que serão executadas para criação da imagem em questão.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ENTRYPOINT :&lt;/strong&gt; Especifica o que o que será executado ao iniciar o container. Ele age como precedente a sintaxe &lt;strong&gt;CMD&lt;/strong&gt;, ou seja, caso o &lt;strong&gt;ENTRYPOINT&lt;/strong&gt; seja &amp;#8220;top&amp;#8221;, o &lt;strong&gt;CMD&lt;/strong&gt; pode ser &amp;#8220;-b&amp;#8221; que nesse caso ele executaria o top em modo batch. Uma vez que o &lt;strong&gt;ENTRYPOINT&lt;/strong&gt; não seja especificado, e um &lt;strong&gt;CMD&lt;/strong&gt; seja usado, o &lt;strong&gt;ENTRYPOINT&lt;/strong&gt; padrão é &amp;#8220;&lt;code&gt;/bin/sh -c&lt;/code&gt;&amp;#8220;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXPOSE :&lt;/strong&gt; Usado para informar qual porta o container docker irá &amp;#8220;escutar&amp;#8221;. Docker usa essa informação para interconexão entre containers, ao utilizar links. &lt;strong&gt;EXPOSE&lt;/strong&gt; não define qual porta será exposta para o hospedeiro ou tornar possível o acesso externo para portas do container em questão. Para expor essas portas utilize em tempo de inicialização da imagem a flag -p ou -P.&lt;/p&gt;
&lt;p&gt;Para explicação mais exaustiva das sintaxes já explanadas e outras novas, acesse &lt;a href=&quot;https://docs.docker.com/reference/builder/&quot;&gt;essa documentação.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Exemplo&lt;/h2&gt;
&lt;p&gt;Crie uma pasta com o comando abaixo:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mkdir nginx&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Entre nessa pasta:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# cd nginx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;E então crie um arquivo chamado &amp;#8220;Dockerfile&amp;#8221; com o seguinte conteúdo:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FROM debian&lt;br /&gt;
MAINTAINER Rafael Gomes &amp;lt;gomex@riseup.net&amp;gt;&lt;br /&gt;
RUN apt-get update&lt;br /&gt;
RUN apt-get install -y nginx&lt;br /&gt;
ENTRYPOINT [&quot;/usr/sbin/nginx&quot;]&lt;br /&gt;
EXPOSE 80&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Com esse Dockerfile, temos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma imagem com base na imagem do Debian, ou seja, não precisamos nos preocupar com o sistema básico.&lt;/li&gt;
&lt;li&gt;O autor dessa imagem sou eu &lt;img src=&quot;http://techfree.com.br/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Primeiro eu atualizo a base do apt-get e então instalo o nginx.&lt;/li&gt;
&lt;li&gt;Ao iniciar essa imagem ela executará o nginx automaticamente.&lt;/li&gt;
&lt;li&gt;A porta exposta para possível interconexão entre containers é a porta 80.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nesse &lt;a href=&quot;https://docs.docker.com/articles/dockerfile_best-practices/&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt; tem um ótimo documento explicando as boas práticas na criação de um Dockerfile.&lt;/p&gt;
&lt;h2&gt;Criando a imagem&lt;/h2&gt;
&lt;p&gt;Com o Dockerfile preenchido, execute o comando abaixo para criar sua imagem:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# docker build -t=gomex/nginx .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;No lugar de &amp;#8220;gomex&amp;#8221; coloque o seu usuário da &lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot;&gt;nuvem pública do docker&lt;/a&gt; e no lugar de &amp;#8220;nginx&amp;#8221; o nome da sua imagem.&lt;/p&gt;
&lt;p&gt;Ao terminar, pode efetuar o push para a nuvem pública e assim proporcionar a distribuição da sua imagem:&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
# docker push gomex/nginx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pronto! Agora já tem sua imagem prontinha, totalmente &amp;#8220;enxuta&amp;#8221; e disponível para que outra pessoa possa baixar e utilizar.&lt;/p&gt;
&lt;p&gt;Por hoje é só pessoal, logo teremos mais artigos sobre &lt;a title=&quot;Docker&quot; href=&quot;http://techfree.com.br/category/docker/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;. Fiquem atentos.&lt;/p&gt;</content:encoded>
	<dc:date>2015-04-05T11:09:36+00:00</dc:date>
</item>
<item rdf:about="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-machine.html">
	<title>Wellington Silva: Docker, do Básico a Orquestração e Clusterização - 5. Ambiente</title>
	<link>http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-machine.html</link>
	<content:encoded>&lt;p&gt;Nessa série de artigos estamos abordando tópicos para uma boa utilização do &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive img-thumbnail pull-left&quot; title=&quot;Ship shipping ships&quot; alt=&quot;Ship shipping ships&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/ship-shipping-ships.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para entender melhor a orquestração e antes de partirmos para a clusterização precisamos entender bem como usar o docker em nossa máquina de dia a dia, a nossa máquina dev, nosso ambiente de desenvolvimento.&lt;/p&gt;

&lt;p&gt;Se sua máquina estiver rodando Linux, qualquer distribuição, tudo fica mais fácil. Por que wsilva? Porque como vimos nos artigos anteriores o Docker trabalha com LXC - Linux Containers. Bom, linux dispensa comentários mas container, fazendo um paralelo com a virtualização tradicional, seria o sistema operacional (Linux também no nosso caso) rodando como guest.&lt;/p&gt;

&lt;p&gt;Pô wsilva mas então é Linux rodando em cima de Linux!?&lt;/p&gt;

&lt;p&gt;Exatamente. E como também já vimos anteriormente a grande vantagem de usarmos LXC é não precisar do hypervisor (Virtualbox e afins), já que muitos recursos são compartilhados entre o Host e o Guest.&lt;/p&gt;

&lt;!--continua--&gt;

&lt;p&gt;Aaaaa wsilva, então por isso que tem que ser Linux sobre Linux, senão esse compartilhamento não rola, certo!?&lt;/p&gt;

&lt;p&gt;Certíssimo, rodar um linux container num host Windows acho quase impossível por causa da arquitetura, do Kernel diferente, etc. O mesmo também seria para o MacOS, mas devemos lembrar que MacOS vem do Unix. E o Linux vem do Minix que vem do Unix. Isso significa que por mais difícil que possa parecer pode pintar algum louco que consiga compartilhar o Kernel, libs e outros recursos de um host MacOS com containers Linux, ou até o contrário.&lt;/p&gt;

&lt;h2 id=&quot;no-linux&quot;&gt;No Linux&lt;/h2&gt;

&lt;p&gt;No linux tenho trabalhado apenas com o &lt;a href=&quot;https://github.com/docker/compose&quot; target=&quot;_blank&quot;&gt;Docker Compose&lt;/a&gt;. Temos um fig.yml, que em breve teremos que renomear para docker-compose.yml, com os container, a instruções de cada container, os links e tudo mais.&lt;/p&gt;

&lt;p&gt;Após rodar o fig up / docker-compose up nossos containers sobem como se estivessem em nossa máquina local. Podemos confirmar com o docker-compose ps.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker-compose up -d
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;fig.yml is deprecated and will not be supported in future. Please rename your config file to docker-compose.yml
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;Recreating projeto_proxy_1...
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;Recreating projeto_rabbit_1...
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;Recreating projeto_mysql_1...
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;Recreating projeto_solr_1...
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;Recreating projeto_redis_1...
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;Recreating projeto_web_1...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker-compose ps
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;fig.yml is deprecated and will not be supported in future. Please rename your config file to docker-compose.yml
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;     Name                Command          State                        Ports
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;--------------------------------------------------------------------------------------------------
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;projeto_mysql_1    /entrypoint.sh mysqld   Up      0.0.0.0:3306-&amp;gt;3306/tcp
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;projeto_proxy_1    forego start -r         Up      443/tcp, 0.0.0.0:80-&amp;gt;80/tcp
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;projeto_rabbit_1   /run.sh                 Up      0.0.0.0:15672-&amp;gt;15672/tcp, 0.0.0.0:5672-&amp;gt;5672/tcp
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;projeto_redis_1    redis-server            Up      0.0.0.0:6379-&amp;gt;6379/tcp
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;projeto_solr_1     /start-solr.sh          Up      0.0.0.0:8983-&amp;gt;8983/tcp
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;projeto_web_1      /start-web.sh           Up      0.0.0.0:49153-&amp;gt;80/tcp
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Podemos acessar por exemplo o dashboard do rabbit pelo ip de loopback: http://127.0.0.1:15672, o próprio painel do solr pelo http://127.0.0.1:8983/, ou até o redis sem passar o parâmetro com o host:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;redis-cli
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;no-macos&quot;&gt;No MacOS&lt;/h2&gt;

&lt;p&gt;No MacOS (e creio que no Windows seja parecido) precisamos rodar uma máquina virtual linux com o serviço docker de pé e é esse linux que vai ser o docker host rodar os containers.&lt;/p&gt;

&lt;p&gt;Até a postagem desse artigo a instalação oficial de docker para &lt;a href=&quot;https://docs.docker.com/installation/mac/&quot; target=&quot;_blank&quot;&gt;MacOS&lt;/a&gt; e para &lt;a href=&quot;https://docs.docker.com/installation/windows/&quot; target=&quot;_blank&quot;&gt;Windows&lt;/a&gt; era através do &lt;a href=&quot;http://boot2docker.io/&quot; target=&quot;_blank&quot;&gt;boot2docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O boot2docker é um distribuição linux bem leve (aproximadamente 27MB) baseada no Tiny Core Linux que carrega em memória e já tem suporte para o file system (AUFS) requerido pelo docker e o próprio docker service.&lt;/p&gt;

&lt;p&gt;Primeiro temos que criar nossa VM com o comando:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ boot2docker init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Depois podemos iniciar nossa VM com o comando&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ boot2docker start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Sempre que iniciarmos uma janela de terminal nova no MacOS devemos exportar as variáveis de ambiente do Docker para que consigamos levantar nossos containers (que neste caso rodarão dentro do boot2docker). Basta rodar o comando:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ $(boot2docker shellinit)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Com as variáveis exportadas podemos subir nossos containers:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Para parar nossa VM:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;boot2docker stop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;desvantagem&quot;&gt;Desvantagem&lt;/h3&gt;
&lt;p&gt;A desvantagem de não estar usando linux é que para acessar nossos containers temos que usar ip da VM, do boot2docker. Podemos pegar com o comando:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ boot2docker ip
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;E assim acessar nossos containers pelo ip. Ex.: http://{ip.do.boot2docker}:15672 (rabbit) ou http://{ip.do.boot2docker}:8983/ ou até concatenar comandos para acessar o container de redis por exemplo:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;redis-cli -h `boot2docker ip`
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;alternativas-no-macos&quot;&gt;Alternativas no MacOS&lt;/h2&gt;

&lt;h3 id=&quot;docker-machine&quot;&gt;Docker Machine&lt;/h3&gt;

&lt;p&gt;Quando disse que a até a data do post a instalação oficial era o boot2docker é porque agora temos uma “alternativa oficial” (sim entre aspas mesmo), o &lt;a href=&quot;https://docs.docker.com/machine/&quot; target=&quot;_blank&quot;&gt;docker-machine&lt;/a&gt; que não só provisiona VMs linux em nossa máquina dev através do Virtualbox e VMware ele também provisiona em outros ambientes Linux e em serviços cloud como o EC2 da Amazon, o Azure, a Digitalocean, o Google Engine, Openstack, Rackspace, Softlayer, etc.&lt;/p&gt;

&lt;p&gt;Por que alternativa oficial entre aspas? Porque a VM que ele provisiona (pelo menos localmente) é um boot2docker, e sendo o docker-machine mais completo pode vir a substituir o processo de instalação em MacOS e Windows que atualmente na documentação é a instalação do boot2docker puro e simples.&lt;/p&gt;

&lt;p&gt;Para criar uma VM na DigitalOcean por exemplo executamos:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker-machine create --driver digitalocean --digitalocean-access-token=tokenxptoyadaxptoyadatoken nome-da-vm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;No nosso caso, para trabalhar localmente podemos criar uma VM no Virtual Box:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker-machine create -d virtualbox nome-da-vm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Se quisermos criar com mais recursos.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker-machine create --driver virtualbox --virtualbox-memory=2048 --virtualbox-disk-size=30000 nome-de-outra-vm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Se não passados esses parâmetros os padrões adotados são 20000 MB de disco e 1024 MB de memória.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para listar as VMs criadas:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker-machine ls
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;NAME              ACTIVE   DRIVER       STATE     URL                         SWARM
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;nome-da-vm        *        virtualbox   Running   tcp://192.168.99.100:2376
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;nome-de-outra-vm           virtualbox   Running   tcp://192.168.99.101:2376
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Para exportar as variáveis de ambiente em nosso shell:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ $(docker-machine env nome-da-vm)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Para parar e retormar uma vm. Se não passarmos o nome da VM ele entenderá que é a VM ativa:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker-machine stop nome-da-vm
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ docker-machine start nome-da-vm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Para mudar a VM ativa:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker-machine active nome-de-outra-vm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;kitematic&quot;&gt;Kitematic&lt;/h3&gt;

&lt;p&gt;Dois dias depois que escrevi a parte 4 desta série de posts, no dia 12 de março, o pessoal do Docker estava apresentando o &lt;a href=&quot;https://kitematic.com/&quot; target=&quot;_blank&quot;&gt;Kitematic&lt;/a&gt; como alternativa para Mac OS. Acompanhei o meet up online de apresentação do Kitematic no dia 17 de março e vou passar minhas impressões pessoais a respeito.&lt;/p&gt;

&lt;p&gt;O Kitematic é um GUI (Graphical User Interface) baseado no docker-machine, escrito em Javascript. Parecido com o &lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot;&gt;Atom&lt;/a&gt; é baseado na engine do Google Chrome (da até para inspecionar elemento) e desta maneira pode ser portado para o Windows. Durante a parte das perguntas (Q&amp;amp;A) no meet up eles deixaram escapar que essa portabilidade já está no RoadMap deles (Além de diversas melhorias na integração com dockerhub).&lt;/p&gt;

&lt;p&gt;Esse carinha facilita muito a criação e a manutenção de containers, e se tivermos uma orquestração via docker-compose, os container criados também aparecerão também na tela do Kitematic.&lt;/p&gt;

&lt;p&gt;A interação se dá por botões simples e intuitivos. Temos a opção para entrar no console de um container que esteja rodando (por debaixo dos panos utiliza o comando &lt;em&gt;docker exec -ti container /bin/bash&lt;/em&gt;), temos a opção de abrir no navegador a url, na verdade o ip, do container, temos a opção de alterar as configurações de execução de um containere outras opções.&lt;/p&gt;

&lt;p&gt;Abrindo o Kitematic. A VM criada é iniciada por baixo dos panos:
&lt;img class=&quot;img-responsive img-thumbnail center-block&quot; title=&quot;Booting VM&quot; alt=&quot;Booting VM&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/1-kitematic-booting.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Criando container com base em imagens existentes no Dockerhub:
&lt;img class=&quot;img-responsive img-thumbnail center-block&quot; title=&quot;Creating Containers&quot; alt=&quot;Creating Containers&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/2-creating-container.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Iniciando o novo container:
&lt;img class=&quot;img-responsive img-thumbnail center-block&quot; title=&quot;Starting new container&quot; alt=&quot;Starting new container&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/3-starting-new-container.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opções de visualizar log e preview no navegador:
&lt;img class=&quot;img-responsive img-thumbnail center-block&quot; title=&quot;Preview Log and in Browser&quot; alt=&quot;Preview Log and in Browser&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/4-preview-log-browser.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Configurações do container:
&lt;img class=&quot;img-responsive img-thumbnail center-block&quot; title=&quot;General Settings&quot; alt=&quot;General Settings&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/5-general-settings.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Configurações de exposição de portas:
&lt;img class=&quot;img-responsive img-thumbnail center-block&quot; title=&quot;Port Settings&quot; alt=&quot;Port Settings&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/6-port-settings.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Configurações de volumes a serem montados:
&lt;img class=&quot;img-responsive img-thumbnail center-block&quot; title=&quot;Volume Settings&quot; alt=&quot;Volume Settings&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/7-volume-settings.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dvm&quot;&gt;DVM&lt;/h3&gt;
&lt;p&gt;Alternativa para subir o docker no Mac OS &lt;a href=&quot;http://fnichol.github.io/dvm/&quot; target=&quot;_blank&quot;&gt;http://fnichol.github.io/dvm/&lt;/a&gt;. Também é baseado numa VM rodando boot2docker e os containers dentro da VM.&lt;/p&gt;

&lt;h2 id=&quot;ferramentas-para-gerenciamento-de-docker-containers&quot;&gt;Ferramentas para gerenciamento de docker containers&lt;/h2&gt;

&lt;p&gt;São ferramentas para gerenciar a criação e até orquestração de containers&lt;/p&gt;

&lt;h3 id=&quot;shipyard&quot;&gt;Shipyard&lt;/h3&gt;
&lt;p&gt;É um container que quando iniciamos consegue gerenciar a criação de novos containers via navegador. Tem algumas ferramentas interessantes que permitem monitoramento e até orquestração. &lt;a href=&quot;http://shipyard-project.com/&quot; target=&quot;_blank&quot;&gt;http://shipyard-project.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;docker-ui&quot;&gt;Docker-UI&lt;/h3&gt;
&lt;p&gt;Parecido com o Shipyard mas com menos recursos &lt;a href=&quot;https://github.com/crosbymichael/dockerui&quot; target=&quot;_blank&quot;&gt;https://github.com/crosbymichael/dockerui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;panamax&quot;&gt;Panamax&lt;/h3&gt;
&lt;p&gt;Também parecido com Shipyard te dá a opção de subir um sistema multi containers &lt;a href=&quot;http://panamax.io/&quot; target=&quot;_blank&quot;&gt;http://panamax.io/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;concluindo&quot;&gt;Concluindo&lt;/h2&gt;
&lt;p&gt;Todas as ferramentas que tenho visto para usar containers em Mac OS e Windows esbarram em ter que rodar os containers sobre uma VM (boot2docker). E sempre que rodamos esses containers para conseguirmos acesso via web , logs, e acesso remoto temos que ter em mente que não adianta bater no ip de loopback (127.0.0.1). Temos que bater (ou apontar nossos virtual hosts para) endereço da VM.&lt;/p&gt;

&lt;p&gt;O mundo docker está evoluindo muito e bem rápido, é bom acompanhar as novidades sempre no &lt;a href=&quot;http://blog.docker.com/&quot; target=&quot;_blank&quot;&gt;blog&lt;/a&gt; deles e nos meet ups das comunidades.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;To Be Continued&lt;/h2&gt;
&lt;p&gt;Para finalizar a série no próximo artigo falaremos sobre clusterização usando Docker Swarm&lt;/p&gt;

&lt;p&gt;Té +&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-24T03:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.ricardomartins.com.br/?p=5567">
	<title>Ricardo Martins: OpsWorks: Trabalhando com cookbooks customizadas – Parte III/III</title>
	<link>http://www.ricardomartins.com.br/opsworks-trabalhando-com-cookbooks-customizadas/</link>
	<content:encoded>&lt;p&gt;Finalizando a série de artigos sobre o OpsWorks, neste post veremos como utilizar cookbooks customizadas em nosso ambiente. Para começar, entre na console do OpsWorks e vamos criar nossa segunda stack. Clique em Add Stack e preencha os dados necessários: Clique em advanced para abrir mais opções e definir que utilizaremos cookbooks customizadas. No caso, [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;O post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br/opsworks-trabalhando-com-cookbooks-customizadas/&quot;&gt;OpsWorks: Trabalhando com cookbooks customizadas &amp;#8211; Parte III/III&lt;/a&gt; apareceu primeiro em &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br&quot;&gt;Ricardo Martins&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-23T19:51:10+00:00</dc:date>
</item>
<item rdf:about="http://stefanteixeira.com.br/tag/devops/rss/edec586a-54e9-4614-b747-dddac13b7e2d">
	<title>Stefan Teixeira: Comandos essenciais do Docker e monitoramento de containers</title>
	<link>http://stefanteixeira.com.br/2015/03/17/comandos-essenciais-docker-monitoramento-containers/</link>
	<content:encoded>&lt;p&gt;Neste post, quero compartilhar uma lista dos comandos mais importantes no dia-a-dia trabalhando com Docker. Além disso, vou mostrar três recursos para monitoramento de containers, dois deles que estão disponíveis com a &lt;a href=&quot;http://blog.docker.com/2015/02/docker-1-5-ipv6-support-read-only-containers-stats-named-dockerfiles-and-more/&quot;&gt;última atualização do Docker (versão 1.5 - Fev/2015)&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;masperaoquedocker&quot;&gt;Mas peraí, o que é Docker?&lt;/h2&gt;

&lt;p&gt;Sem dúvidas, &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; é um dos assuntos mais falados (se não o mais falado) na comunidade de TI em todo o mundo. O Docker revolucionou com sua simples abordagem para containerização de aplicações. Várias grandes empresas já se tornaram parceiras, ofereceram serviços ou passaram a suportar o Docker. Uma das parcerias mais inesperadas foi a da &lt;a href=&quot;http://news.microsoft.com/2014/10/15/dockerpr/&quot;&gt;Microsoft, que busca o suporte futuro do Docker ao Windows Server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Uma figura bastante interessante, apresentada no mês passado em uma palestra do evento IBM Inter Connect 2015, mostra a explosão do Docker na comunidade:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-16-at-23-01-17.png&quot; alt=&quot;docker grow&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;Este post presume conhecimento prévio sobre Docker. Caso se interesse em aprender sobre, o amigo Leonardo Galani &lt;a href=&quot;http://keeptesting.com.br/2014/11/25/seu-ambiente-de-teste-com-docker/&quot;&gt;escreveu um ótimo post de introdução ao Docker&lt;/a&gt;, vale &lt;strong&gt;muito&lt;/strong&gt; a pena conferir. No final do post do Galani, tem também o link para um vídeo introdutório, assista! :)&lt;/p&gt;
  
  &lt;p&gt;Outra excelente fonte para aprender sobre Docker é o livro &lt;a href=&quot;http://www.amazon.com.br/The-Docker-Book-Containerization-virtualization-ebook/dp/B00LRROTI4&quot;&gt;The Docker Book&lt;/a&gt;, que possui até um site: &lt;a href=&quot;http://dockerbook.com/&quot;&gt;http://dockerbook.com/&lt;/a&gt;. O livro é extremamente recomendado e foi por onde eu comecei a estudar o assunto. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;comandosessenciaisdodocker&quot;&gt;Comandos essenciais do Docker&lt;/h2&gt;

&lt;p&gt;Vou listar os comandos que mais uso no dia-a-dia nesses últimos meses que tenho trabalhado com Docker. Recomendo ler a &lt;a href=&quot;https://docs.docker.com/reference/commandline/cli/&quot;&gt;documentação&lt;/a&gt; caso surja alguma dúvida ou caso precise de algo que eu não tenha falado aqui. &lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;builddeumaimagem&quot;&gt;Build de uma imagem&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker build -t &amp;lt;nome_da_imagem&amp;gt; &amp;lt;caminho_para_dockerfile&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; Lembre que as imagens são compostas de camadas (layers) e que o Docker usa caching para fazer o build somente das camadas que tiveram alguma mudança. Recentemente, o Docker publicou uma &lt;a href=&quot;https://github.com/docker/docker/blob/master/image/spec/v1.md&quot;&gt;Image Specification&lt;/a&gt;, que explica como tudo isso funciona. Para buildar uma imagem &lt;strong&gt;sem&lt;/strong&gt; utilizar caching, adicione a opção &lt;code&gt;--no-cache&lt;/code&gt; ao comando.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OBS2:&lt;/strong&gt; A opção &lt;code&gt;-t&lt;/code&gt; cria uma tag para a imagem e é fortemente recomendada.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;executarumcontainer&quot;&gt;Executar um container&lt;/h5&gt;

&lt;p&gt;O comando &lt;strong&gt;run&lt;/strong&gt; tem &lt;strong&gt;MUITOS&lt;/strong&gt; parâmetros possíveis, &lt;a href=&quot;https://docs.docker.com/reference/commandline/cli/#run&quot;&gt;vide documentação&lt;/a&gt;. No meu dia-a-dia, sempre coloco os containers para rodar em background. Com isso, o comando &lt;strong&gt;run&lt;/strong&gt; que uso fica mais ou menos assim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -d -p &amp;lt;porta_host&amp;gt;:&amp;lt;porta_container&amp;gt; --name &amp;lt;nome_container&amp;gt; &amp;lt;nome_imagem&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; Nesse exemplo, eu estou fazendo um mapeamento de portas com a opção &lt;code&gt;-p&lt;/code&gt;. Para mais detalhes, &lt;a href=&quot;https://docs.docker.com/userguide/dockerlinks/#connect-using-network-port-mapping&quot;&gt;veja aqui a documentação desse tópico&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OBS2:&lt;/strong&gt; Você pode adicionar links entre um ou mais containers usando a opção &lt;code&gt;--link &amp;lt;nome_container&amp;gt;:&amp;lt;alias&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt; Quero associar o container da minha aplicação &lt;strong&gt;app1&lt;/strong&gt; com um container do MySQL - &lt;code&gt;--link mysqlcontainer:mysql&lt;/code&gt;. Ao informar esse parâmetro, o Docker irá criar uma entrada no arquivo &lt;code&gt;/etc/hosts&lt;/code&gt; dentro do container, mapeando o endereço do container &lt;strong&gt;mysqlcontainer&lt;/strong&gt; ao alias &lt;strong&gt;mysql&lt;/strong&gt;. Além disso, o Docker também cria váriaveis de ambiente, dentre outras coisas, que você pode conferir com mais detalhes &lt;a href=&quot;https://docs.docker.com/userguide/dockerlinks/#communication-across-links&quot;&gt;clicando aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OBS3:&lt;/strong&gt; Você pode adicionar explicitamente uma entrada ao arquivo de hosts do container através do parâmetro &lt;code&gt;--add-host &amp;lt;nome_host&amp;gt;:&amp;lt;endereco_IP&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;iniciarumasessobashemumcontainerqueestejarodando&quot;&gt;Iniciar uma sessão bash em um container que esteja rodando&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker exec -it &amp;lt;nome_container&amp;gt; bash  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esse comando é essencial quando precisamos entrar no container e ver o que está acontecendo. :)&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;veroslogsdeumcontainer&quot;&gt;Ver os logs de um container&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker logs &amp;lt;nome_container&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; Para acompanhar em tempo real os logs de um container que &lt;strong&gt;esteja rodando&lt;/strong&gt;, basta adicionar o parâmetro &lt;code&gt;-f&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;vertodasasimagensnohost&quot;&gt;Ver todas as imagens no host&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker images  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;vertodososcontainers&quot;&gt;Ver todos os containers&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker ps -a  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;removerumcontainer&quot;&gt;Remover um container&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker rm -f &amp;lt;nome_container&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;removertodososcontainers&quot;&gt;Remover TODOS os containers&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker rm -f $(docker ps -a -q)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;removerumaimagem&quot;&gt;Remover uma imagem&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker rmi -f &amp;lt;nome_imagem&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; Antes de remover uma imagem, remova &lt;strong&gt;todos&lt;/strong&gt; os containers que a usem.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;removerdanglingimages&quot;&gt;Remover dangling images&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker rmi $(docker images -q -f dangling=true)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&quot;Dangling images&quot; são, basicamente, imagens sem uma tag. Se você alguma(s) vez(es) rodou um Dockerfile que falhou, provavelmente você deve ter uma ou mais imagens sem tags. Para removê-las, basta usar o comando acima.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h5 id=&quot;copiarumarquivodocontainerparaohost&quot;&gt;Copiar um arquivo do container para o host&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker cp &amp;lt;nome_container&amp;gt;:/caminho/no/container /caminho/no/host  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exemplo: &lt;code&gt;docker cp app1:/home/ec2-user/log.txt /logs&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;monitoramentodecontainers&quot;&gt;Monitoramento de containers&lt;/h2&gt;

&lt;p&gt;Para monitorar os seus containers, vou indicar três possíveis recursos. Todos são &lt;strong&gt;muito&lt;/strong&gt; simples de usar, sinta-se à vontade para escolher o que preferir. :)&lt;/p&gt;

&lt;h4 id=&quot;dockerstats&quot;&gt;Docker stats&lt;/h4&gt;

&lt;p&gt;A versão 1.5 do Docker trouxe a &lt;a href=&quot;http://blog.docker.com/2015/02/docker-1-5-ipv6-support-read-only-containers-stats-named-dockerfiles-and-more/&quot;&gt;um comando e uma API de &lt;strong&gt;stats&lt;/strong&gt;&lt;/a&gt;, que fornece dados dos containers, como % de uso da CPU, memória e de rede.&lt;/p&gt;

&lt;p&gt;Para ver as estatísticas de um container, basta usar o seguinte comando:  &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker stats &amp;lt;nome_container&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Você verá um resultado como esse: &lt;br /&gt;
&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-17-at-3-37-48-PM.png&quot; alt=&quot;ex stats&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; Para ver as estatísticas de &lt;strong&gt;todos&lt;/strong&gt; os containers rodando no host, use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker stats `docker ps | tail -n+2 | awk '{ print $NF }'`  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h4 id=&quot;dockermon&quot;&gt;Docker-mon&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/icecrime/docker-mon&quot;&gt;Docker-mon&lt;/a&gt; é um projeto para monitoramento de containers baseado no &lt;a href=&quot;https://github.com/yaronn/blessed-contrib&quot;&gt;blessed-contrib&lt;/a&gt;, que cria dashboards em terminais usando ASCII/ANSI art e JS. Ele exibe uma série de informações e gráficos para cada container rodando no host.&lt;/p&gt;

&lt;p&gt;Para usá-lo, basta rodar diretamente o container com o comando abaixo, que irá baixar a imagem do projeto automaticamente no &lt;a href=&quot;https://registry.hub.docker.com/u/icecrime/docker-mon/&quot;&gt;DockerHub&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -ti -v /var/run/docker.sock:/var/run/docker.sock icecrime/docker-mon  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Após a execução do comando, você verá um dashboard como esse (imagem retirada do GitHub do projeto): &lt;br /&gt;
&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-17-at-3-40-38-PM.png&quot; alt=&quot;docker-mon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h4 id=&quot;cadvisor&quot;&gt;cAdvisor&lt;/h4&gt;

&lt;p&gt;O &lt;a href=&quot;https://github.com/google/cadvisor&quot;&gt;cAdvisor&lt;/a&gt; é um projeto criado pelo Google para monitoramento de containers, que coleta dados de uso de recursos e de performance dos seus containers. Inicialmente, o projeto era usado para containers &lt;a href=&quot;https://github.com/google/lmctfy&quot;&gt;lmctfy&lt;/a&gt;, mas desde o ano passado também começou a suportar containers do Docker.&lt;/p&gt;

&lt;p&gt;Diferentemente do docker stats e docker-mon, o cAdvisor gera uma página HTML com vários gráficos e dados dos containers e do host. Para usá-lo, simplesmente rode o seguinte comando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo docker run \  
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:rw \
  --volume=/sys:/sys:ro \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --publish=8080:8080 \
  --detach=true \
  --name=cadvisor \
  google/cadvisor:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; Caso você esteja usando o Docker em um ambiente CentOs ou RHEL, o cAdvisor recomenda adicionar a opção &lt;code&gt;--volume=/cgroup:/cgroup \&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Após a execução do comando, a página do cAdvisor estará disponível na porta &lt;strong&gt;8080&lt;/strong&gt; do host. A página será parecida com essa (imagem retirada do excelente post &lt;a href=&quot;http://blog.tutum.co/2014/08/07/using-cadvisor-to-monitor-docker-containers/&quot;&gt;&quot;Using cAdvisor to Monitor Docker Containers&quot;&lt;/a&gt;: &lt;br /&gt;
&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/cadvisor_tutum.png&quot; alt=&quot;cadvisor&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;E é isso! Como sempre, confira os links na seção de Referências. :)&lt;/p&gt;

&lt;p&gt;Qualquer dúvida/crítica/sugestão, não hesite em comentar ou entrar em contato. Abraços e até o próximo post!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;referncias&quot;&gt;Referências&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/reference/commandline/cli/&quot;&gt;https://docs.docker.com/reference/commandline/cli/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://dockerbook.com/&quot;&gt;http://dockerbook.com/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/17665283/how-does-one-remove-an-image-in-docker&quot;&gt;http://stackoverflow.com/questions/17665283/how-does-one-remove-an-image-in-docker&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://keeptesting.com.br/2014/11/25/seu-ambiente-de-teste-com-docker/&quot;&gt;http://keeptesting.com.br/2014/11/25/seu-ambiente-de-teste-com-docker/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://blog.docker.com/2015/02/docker-1-5-ipv6-support-read-only-containers-stats-named-dockerfiles-and-more/&quot;&gt;http://blog.docker.com/2015/02/docker-1-5-ipv6-support-read-only-containers-stats-named-dockerfiles-and-more/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/icecrime/docker-mon&quot;&gt;https://github.com/icecrime/docker-mon&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://blog.tutum.co/2014/08/07/using-cadvisor-to-monitor-docker-containers/&quot;&gt;http://blog.tutum.co/2014/08/07/using-cadvisor-to-monitor-docker-containers/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/google/cadvisor&quot;&gt;https://github.com/google/cadvisor&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Sobre o autor:&lt;/strong&gt; Stefan Teixeira trabalha como QA Engineer e, desde o final de 2014, tem se aventurado no mundo DevOps. É Bacharel em Ciência da Computação pela UFRJ e MBA em Garantia de Qualidade de Software pela Escola Politécnica da UFRJ. Entusiasta de Testes Automatizados (e de tudo que possa ser automatizado!), Agile Testing e da cultura DevOps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contatos:&lt;/strong&gt; stefanfk@gmail.com | &lt;a href=&quot;https://twitter.com/stefan_teixeira&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://br.linkedin.com/in/stefanteixeira&quot;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-17T19:25:50+00:00</dc:date>
</item>
<item rdf:about="http://www.ricardomartins.com.br/?p=5544">
	<title>Ricardo Martins: OpsWorks: Tutorial prático de implementação e uso – Parte II/III</title>
	<link>http://www.ricardomartins.com.br/opsworks-tutorial-pratico-de-implementacao-e-uso/</link>
	<content:encoded>&lt;p&gt;Continuando o post anterior sobre o OpsWorks, vou mostrar neste post como criar uma instância com Nginx hospedando um site estático bem simples, apenas para teste e demonstração. Antes de começar, para entender um pouco mais sobre o conceito de cookbooks e recipes do OpsWorks, você pode dar uma lida aqui: http://docs.aws.amazon.com/opsworks/latest/userguide/gettingstarted-db-recipes.html O cookbook é [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;O post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br/opsworks-tutorial-pratico-de-implementacao-e-uso/&quot;&gt;OpsWorks: Tutorial prático de implementação e uso &amp;#8211; Parte II/III&lt;/a&gt; apareceu primeiro em &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br&quot;&gt;Ricardo Martins&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-12T20:27:58+00:00</dc:date>
</item>
<item rdf:about="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-orquestracao.html">
	<title>Wellington Silva: Docker, do Básico a Orquestração e Clusterização - 4. Orquestração</title>
	<link>http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-orquestracao.html</link>
	<content:encoded>&lt;p&gt;Nessa série de artigos estamos abordando tópicos para uma boa utilização do &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;.
&lt;img class=&quot;img-responsive img-thumbnail pull-left&quot; title=&quot;Thug Orchestra&quot; alt=&quot;Thug Orchestra&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/thug-orchestra.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No artigo anterior abordamos duas maneiras de construir um container, algumas dicas para montagem e utilização. Agora nos perguntamos montamos um “containerzão” com todos os serviços que minha aplicação precisa para rodar ou montamos vários “containerzinhos” um para cada serviço da aplicação.&lt;/p&gt;

&lt;p&gt;Sugiro que sempre monte de acordo com a sua arquitetura em produção, quanto mais “live/production” nosso ambiente de desenvolvimento está, menos surpresas teremos em nossas entregas.&lt;/p&gt;

&lt;!--continua--&gt;

&lt;p&gt;Quando você está trabalhando em uma aplicação cheia de serviços acoplados como banco, memória, busca elástica entre outros serviços acabamos montando tudo no mesmo Virtualbox, ou no mesmo Vagrant, por que se subirmos uma VM para cada serviço nossa máquina host vai pro Goiás. Toda hora vai ficar travando e coisa do gênero.&lt;/p&gt;

&lt;p&gt;Com Docker a coisa muda de figura, conseguimos subir vários container na mesma máquina e ligamos eles à nossa maneira na mesma rede. Por exemplo podemos ter um web server que deva se comunicar diretamente com um servidor de banco de dados, então eles devem se enxergar dentro da rede.&lt;/p&gt;

&lt;p&gt;Por sua vez o sevidor de banco de dados não precisa se comunicar com uma aplicação de elastic search por exemplo.&lt;/p&gt;

&lt;h2 id=&quot;orquestrao-vida-loka&quot;&gt;Orquestração Vida Loka&lt;/h2&gt;

&lt;p&gt;A orquestração na unha dá muito trabalho para manter.
Neste exemplo vamos subir um container rodando um banco de dados MySQL.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker run -d --name mysql wfsilva/mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Antes de rodar o container de Web vamos apagar o antigo&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker rm -f web
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Agora sim podemos subir o container da aplicação com link para o container de banco de dados:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;docker run -it --name web --link mysql:mysql wfsilva/nginx-php-fpm-docker /run.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Neste momento temos 2 containers rodando &lt;em&gt;wfsilva/nginx-php-fpm-docker&lt;/em&gt; e &lt;em&gt;wfsilva/mysql&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se entrarmos no container “web” conseguiremos acessar o container “mysql” como se fossem 2 servidores na mesma rede:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker exec -ti wfsilva/nginx-php-fpm-docker bash
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;# ping mysql
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;PING localhost (172.17.0.5): 48 data bytes
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;56 bytes from 172.17.0.5: icmp_seq=0 ttl=64 time=0.064 ms
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;56 bytes from 172.17.0.5: icmp_seq=1 ttl=64 time=0.125 ms
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;56 bytes from 172.17.0.5: icmp_seq=2 ttl=64 time=0.092 ms
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;56 bytes from 172.17.0.5: icmp_seq=3 ttl=64 time=0.096 ms
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;^C
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;orquestrao-com-o-fig-hoje-internalizado-como-docker-compose&quot;&gt;Orquestração com o Fig (Hoje internalizado como Docker Compose)&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive img-thumbnail pull-right&quot; title=&quot;Fig Logo&quot; alt=&quot;Fig Logo&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/fig-logo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O &lt;a href=&quot;http://www.fig.sh/&quot; target=&quot;_blank&quot;&gt;Fig&lt;/a&gt; é um carinha feito em python que foi inventado para facilitar o uso de vários containers interligados. Ele foi internalizado pelo pessoal do Docker e agora se chama &lt;a href=&quot;http://docs.docker.com/compose/&quot; target=&quot;_blank&quot;&gt;docker-compose&lt;/a&gt;. Ele junto com o docker-machine e o docker-swarm são as grandes novidades anunciadas na DockerCon EU 2014 que ocorreu em dezembro de 2014.&lt;/p&gt;

&lt;p&gt;Para instalar bastava rodar o comando:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ pip install fig
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Agora temos as seguintes opções:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ chmod +x /usr/local/bin/docker-compose
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ pip install -U docker-compose
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Com o fig / docker-compose todos os containers que rodam sua aplicação ficam descritos em um arquivo yml onde os nós principais são os containers e os nós dentro de cada container representam suas propriedades.&lt;/p&gt;

&lt;p&gt;Ex. de docker-compose.yml:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span&gt;web&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;  &lt;span&gt;build&lt;/span&gt;: &lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;  &lt;span&gt;command&lt;/span&gt;: &lt;span&gt;&lt;span&gt;/run.sh&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;  &lt;span&gt;ports&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    - &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;80:80&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;  &lt;span&gt;volumes&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    - &lt;span&gt;&lt;span&gt;.:/src&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;  &lt;span&gt;links&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    - &lt;span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;  &lt;span&gt;image&lt;/span&gt;: &lt;span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;  &lt;span&gt;ports&lt;/span&gt;: &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;3306:3306&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;O arquivo fala por si só. Ele descreve 2 containers nomeados web e mysql.&lt;/p&gt;

&lt;p&gt;O container web vai contruir a partir de um dockerfile que steja localizado no mesmo path onde o arquivo docker-compose.yml está. Vai rodar o run.sh quando iniciar. Vai mapear a porta 80 para a porta 80 do docker host, desta maneira podemos acessá-lo como se fosse um serviço local através do ip 127.0.0.1 . Vai montar o diretório que está para dentro do /src no container e vai ligar com o container mysql.&lt;/p&gt;

&lt;p&gt;O container mysql será baixado pronto do repositório no dockerhub e vai mapear a porta 3306 para a porta 3306 do docker host.&lt;/p&gt;

&lt;p&gt;Para contruir um container rodamos fig build  ou docker-compose . Ex:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ fig build web
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ # ou
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;$ docker-compose build web
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Para contruir todos os containers do arquivo yml basta rodar sem parâmetros:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ fig build
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ # ou
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;$ docker-compose build
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Para iniciar ou encerrar um ou mais containers basta passar os nomes:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ fig start web mysql
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ fig stop mysql
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;$ # ou
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;$ docker-compose start web mysql
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;$ docker-compose stop mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Para subir o grupo todo utilizamos o parâmetro up que além de subir os containers vai mostrar os logs de todos os containers na tela. Para finalizar basta dar um ctrl+c. Ou ao iniciar passamos o parâmetro &lt;em&gt;-d&lt;/em&gt; que não mostrará os logs na tela.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ fig up -d
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ # ou
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;$ docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Para acessar os logs de execução dos containers:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ fig logs
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ # ou
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;$ docker-compose logs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Outra coisa bem legal é o scale. Se temos um container que só expõe a porta (EXPOSE 80) e não mapeia (EXPOSE 80:80) podemos escalar ele:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ fig scale web=8
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ # ou
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;$ docker-compose scale web=8
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Teremos 8 instâncias do container web rodando. Cada uma em um ip diferente e expondo a porta 80. No docker host essas portas 80 estarão mapeadas em portas altas.&lt;/p&gt;

&lt;p&gt;Abaixo veremos um exemplo de yml onde utilizo um container chamado proxy que vi implementado por &lt;a href=&quot;https://github.com/jwilder&quot; target=&quot;_blank&quot;&gt;Jason Wilder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nesse container ele mapeia o &lt;em&gt;/var/run/docker.sock&lt;/em&gt; da docker host para &lt;em&gt;/tmp/docker.sock&lt;/em&gt; dentro do container. No container também tem um binário forego, um script em go que monitora esse arquivo mapeado &lt;em&gt;/tmp/docker.sock&lt;/em&gt; e se há alterações ele usa o docker-gen para reconstruir um nginx.conf, se baseando num arquivo de template.&lt;/p&gt;

&lt;p&gt;Por fim ele faz um reload do Nginx server e com isso esse Nginx acaba fazendo proxy pass e load balance para os containers monitorados.&lt;/p&gt;

&lt;p&gt;O que acham de um yml desse:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span&gt;proxy&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;build&lt;/span&gt;: &lt;span&gt;&lt;span&gt;./proxy&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;volumes&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;/var/run/docker.sock:/tmp/docker.sock&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;ports&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;80:80&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;build&lt;/span&gt;: &lt;span&gt;&lt;span&gt;./redis&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;privileged&lt;/span&gt;: &lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    &lt;span&gt;volumes&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;./redis:/data&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;ports&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;6379:6379&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;entrypoint&lt;/span&gt;: &lt;span&gt;&lt;span&gt;redis-server&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;&lt;span&gt;rabbit&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;image&lt;/span&gt;: &lt;span&gt;&lt;span&gt;tutum/rabbitmq&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;environment&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;RABBITMQ_PASS=teste&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;ports&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;5672:5672&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;15672:15672&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;&lt;span&gt;solr&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;build&lt;/span&gt;: &lt;span&gt;&lt;span&gt;./solr&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;privileged&lt;/span&gt;: &lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;volumes&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;./src/solr:/src/solr&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;ports&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;8983:8983&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n29&quot; name=&quot;n29&quot;&gt;29&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;entrypoint&lt;/span&gt;: &lt;span&gt;&lt;span&gt;/start-solr.sh&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n30&quot; name=&quot;n30&quot;&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n31&quot; name=&quot;n31&quot;&gt;31&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;build&lt;/span&gt;: &lt;span&gt;&lt;span&gt;./mysql&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n32&quot; name=&quot;n32&quot;&gt;32&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;privileged&lt;/span&gt;: &lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n33&quot; name=&quot;n33&quot;&gt;33&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;ports&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n34&quot; name=&quot;n34&quot;&gt;34&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;3306:3306&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n35&quot; name=&quot;n35&quot;&gt;35&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;environment&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n36&quot; name=&quot;n36&quot;&gt;36&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;MYSQL_ROOT_PASSWORD=teste&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n37&quot; name=&quot;n37&quot;&gt;37&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;MYSQL_USER=teste&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n38&quot; name=&quot;n38&quot;&gt;38&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;MYSQL_PASSWORD=teste&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n39&quot; name=&quot;n39&quot;&gt;39&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;MYSQL_DATABASE=teste_db&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n40&quot; name=&quot;n40&quot;&gt;40&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;web&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n41&quot; name=&quot;n41&quot;&gt;41&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;build&lt;/span&gt;: &lt;span&gt;&lt;span&gt;./web&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n42&quot; name=&quot;n42&quot;&gt;42&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;environment&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n43&quot; name=&quot;n43&quot;&gt;43&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;VIRTUAL_HOST=teste.dev&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n44&quot; name=&quot;n44&quot;&gt;44&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;links&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n45&quot; name=&quot;n45&quot;&gt;45&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;redis:redis&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n46&quot; name=&quot;n46&quot;&gt;46&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;rabbit:rabbit&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n47&quot; name=&quot;n47&quot;&gt;47&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;solr:solr&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n48&quot; name=&quot;n48&quot;&gt;48&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;mysql:mysql&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n49&quot; name=&quot;n49&quot;&gt;49&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;privileged&lt;/span&gt;: &lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n50&quot; name=&quot;n50&quot;&gt;50&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    &lt;span&gt;volumes&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n51&quot; name=&quot;n51&quot;&gt;51&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;./src:/src&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n52&quot; name=&quot;n52&quot;&gt;52&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;ports&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n53&quot; name=&quot;n53&quot;&gt;53&lt;/a&gt;&lt;/span&gt;        - &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n54&quot; name=&quot;n54&quot;&gt;54&lt;/a&gt;&lt;/span&gt;    &lt;span&gt;entrypoint&lt;/span&gt;: &lt;span&gt;&lt;span&gt;/run.sh&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Pois é, se rodamos o comando:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ fig scale web=5
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ # ou
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;$ docker-compose scale web=5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;O proxy será regenerado e começa a fazer um load balance dos requests feitos para o domínio &lt;em&gt;teste.dev&lt;/em&gt; entre todos o containers web que estiverem rodando.&lt;/p&gt;

&lt;p&gt;Isso é ótimo para testar se a aplicação suporta load balance entre diversos servidores.&lt;/p&gt;

&lt;p&gt;Mais detalhes dessa suruba de containers desse arquivo yml no meu &lt;a href=&quot;https://github.com/wsilva/figpoc&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;To Be Continued&lt;/h2&gt;
&lt;p&gt;Ainda abordaremos como utilizar o docker em ambiente Windows e Mac (boot2docker e docker-compose) e o gerenciador de clusters de containers: docker-swarm.&lt;/p&gt;

&lt;p&gt;Té +&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-10T03:00:00+00:00</dc:date>
</item>
<item rdf:about="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-montando-containers.html">
	<title>Wellington Silva: Docker, do Básico a Orquestração e Clusterização - 3. Montando containers</title>
	<link>http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-montando-containers.html</link>
	<content:encoded>&lt;p&gt;&lt;img class=&quot;img-responsive img-thumbnail pull-left&quot; title=&quot;Docker Logo&quot; alt=&quot;Docker Logo&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/docker-uhu.jpg&quot; /&gt;
Nessa série de artigos estamos abordando tópicos para uma boa utilização do &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dando continuidade ao artigo anterior vamos abordar a criação “on the fly” de containers para rodar sua aplicação, a criação utilizando receitas em arquivos Dockerfile e algumas dicas para montar um bom Dockerfile para sua aplicação.&lt;/p&gt;

&lt;!--continua--&gt;

&lt;h2 id=&quot;montando-container-na-unha&quot;&gt;Montando container “na unha”&lt;/h2&gt;

&lt;p&gt;Primeiramente vamos para a montagem de um container. O jeito mais simples onde você consegue ver de maneira direta o que está acontecendo é criando na hora, “on the fly”, passo a passo até o container estar pronto.&lt;/p&gt;

&lt;p&gt;Seu serviço do docker tem que estar rodando
Para iniciar no Linux:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ sudo service docker start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Para iniciar no Mac e no Windows&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ boot2docker start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Antes que me perguntem sobre o docker machine, escreverei sobre ele em breve abordando as novidades do mundo docker.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nesse exemplo vamos começar baixando um container do Debian 7:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker pull debian
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;debian:latest: The image you are pulling has been verified
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;511136ea3c5a: Already exists
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;30d39e59ffe2: Already exists
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;c90d655b99b2: Already exists
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;Status: Image is up to date for debian:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Entramos no container para começar a “montagem”:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker run -ti debian bash
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/#
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Podemos perceber que estamos agora no bash dentro do container do Debian:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# cat /etc/issue
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;Debian GNU/Linux 7 \n \l
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Vamos agora cria o diretório para os fontes, atualizar os fontes, instalar o wget, instalar os repositórios dotdeb, instalar nginx, php5.4, o fpm tudo com os comandos que estamos acostumados para subir um servidor:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# mkdir /src &amp;amp;&amp;amp; apt-get update &amp;amp;&amp;amp; apt-get install -y wget
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# echo &amp;quot;deb http://packages.dotdeb.org wheezy all&amp;quot; &amp;gt; /etc/apt/sources.list.d/dotdeb.list &amp;amp;&amp;amp; echo &amp;quot;deb-src http://packages.dotdeb.org wheezy all&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list.d/dotdeb.list &amp;amp;&amp;amp; wget -O - http://www.dotdeb.org/dotdeb.gpg |apt-key add -
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# apt-get install php5-cli php5-fpm php5-mysql php5-intl php5-xdebug php5-recode php5-snmp php5-mcrypt php5-memcache php5-memcached php5-imagick php5-curl php5-xsl php5-snmp php5-dev php5-tidy php5-xmlrpc php5-gd php5-pspell php-pear nginx
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;2 upgraded, 162 newly installed, 0 to remove and 6 not upgraded.
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;Need to get 103 MB of archives.
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;After this operation, 289 MB of additional disk space will be used.
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;Do you want to continue [Y/n]? Y
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Depois de tudo instalado vamos configurar o php.ini o fpm e o nginx:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# sed -i &amp;quot;s/;date.timezone =/date.timezone = America\/Sao_Paulo/&amp;quot; /etc/php5/cli/php.ini \
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    &amp;amp;&amp;amp; sed -i &amp;quot;s/;date.timezone =/date.timezone = America\/Sao_Paulo/&amp;quot; /etc/php5/fpm/php.ini \
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    &amp;amp;&amp;amp; sed -i &amp;quot;s/short_open_tag = On/short_open_tag = Off/&amp;quot; /etc/php5/cli/php.ini \
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;    &amp;amp;&amp;amp; sed -i &amp;quot;s/short_open_tag = On/short_open_tag = Off/&amp;quot; /etc/php5/fpm/php.ini \
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    &amp;amp;&amp;amp; sed -i &amp;quot;s/error_reporting = E_ALL &amp;amp; ~E_DEPRECATED &amp;amp; ~E_STRICT/error_reporting = E_ALL/&amp;quot; /etc/php5/cli/php.ini \
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;    &amp;amp;&amp;amp; sed -i &amp;quot;s/error_reporting = E_ALL &amp;amp; ~E_DEPRECATED &amp;amp; ~E_STRICT/error_reporting = E_ALL/&amp;quot; /etc/php5/fpm/php.ini \
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    &amp;amp;&amp;amp; sed -i &amp;quot;s/display_errors = Off/display_errors = On/&amp;quot; /etc/php5/cli/php.ini \
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    &amp;amp;&amp;amp; sed -i &amp;quot;s/display_errors = Off/display_errors = On/&amp;quot; /etc/php5/fpm/php.ini \
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    &amp;amp;&amp;amp; sed -i &amp;quot;s/display_startup_errors = Off/display_startup_errors = On/&amp;quot; /etc/php5/cli/php.ini \
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    &amp;amp;&amp;amp; sed -i &amp;quot;s/display_startup_errors = Off/display_startup_errors = On/&amp;quot; /etc/php5/fpm/php.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Se quiser pode instalar o vi ou nano para editar os arquivos de configurações que mencionamos.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Por fim criamos um virtual host teste.dev&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# cat &amp;lt;&amp;lt; FIM &amp;gt;  /etc/nginx/sites-available/teste.dev.conf
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;server {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;  server_name teste.dev;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;  client_max_body_size  5m;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;  client_header_timeout 1200;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;  client_body_timeout   1200;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;  send_timeout          1200;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;  keepalive_timeout     1200;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;  root        /src/;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;  try_files   $uri $uri/ /index.php?$args;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;  index       index.php;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;  location ~ \.php$ {
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;    fastcgi_pass    unix:/var/run/php5-fpm.sock;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;    fastcgi_index   index.php;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;    include         fastcgi_params;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;    fastcgi_connect_timeout 1200;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;    fastcgi_send_timeout    7200;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;    fastcgi_read_timeout    7200;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;    fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;  }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;}
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;FIM
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;E ativamos ele nos sites enable:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;ln -sf /etc/nginx/sites-available/teste.dev.conf /etc/nginx/sites-enabled/teste.dev.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;daemon-vs-no-daemon&quot;&gt;Daemon vs no Daemon&lt;/h3&gt;
&lt;p&gt;Agora um passo que apanhei bastante e consegui resolver com a ajuda do Mário Rezende. Quando iniciamos um container ele executa o comando que informamos e ao encerrar o comando ele finaliza esse container.&lt;/p&gt;

&lt;p&gt;Você pode confirmar fazendo o seguinte teste. Abra 2 terminais, e um execute:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker run -it debian sleep 40 &amp;amp;&amp;amp; echo fim
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Isso vai subir o container debian, vai aguardar 40 segundos vai imprimir fim e vai encerrar o container&lt;/p&gt;

&lt;p&gt;Antes de acabar os 40 segundos em outro terminal execute várias vezes o comando &lt;em&gt;docker ps&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker ps
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS               NAMES
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;a233a963c968        debian:latest        &amp;quot;sleep 40&amp;quot;          2 hours ago         Up 34 seconds
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Primeiro aparece o container em execução depois ele some:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker ps
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS               NAMES
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Podemos listar o último container executado com o parâmetro -l:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker ps -l
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;a233a963c968        debian:latest       &amp;quot;sleep 40&amp;quot;          2 hours ago         Exited (0) 9 seconds ago                       nostalgic_wozniak
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Com isso na cabeça podemos entender porque quando subimos um container logo após o Nginx iniciar com sucesso ele finaliza (o container todo finaliza).&lt;/p&gt;

&lt;p&gt;Sabendo disso vamos rodar o Nginx como um executável normal, não como daemon e para isso no nosso container, que ainda está rodando porque no comando inicial mandamos rodar o bash (e o bash ainda está rodando), vamos mudar uma configuração no nginx.conf:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# sed -i &amp;quot;s/www-data;/www-data;\\ndaemon off;/g&amp;quot; /etc/nginx/nginx.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Também vamos criar um script básico, maroto para rodar nosso container:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# cat &amp;lt;&amp;lt; FIM &amp;gt;  /run.sh
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;#!/bin/bash
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;/etc/init.d/php5-fpm restart &amp;amp;&amp;amp; nginx
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;FIM
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# chmod a+x /run.sh # tornando executável
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Container pronto vamos pegar o container id, gerar uma nova imagem e enviar para o docker hub:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;root@ba11f3c8394c:/# exit
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ docker ps -l
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;CONTAINER ID        IMAGE                         COMMAND             CREATED             STATUS                       PORTS               NAMES
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;ba11f3c8394c        wfsilva/nginx-phpfpm:latest   &amp;quot;bash&amp;quot;              2 minutes ago
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;$ docker commit ba11f3c8394c wfsilva/nginx-phpfpm
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;aca05520d01b7057baacd4f7f9e9342c1c888ed063c4a1fd557a6d206999c65c
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;$ docker push wfsilva/nginx-phpfpm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Pronto sempre que quiser essa imagem é só rodar:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;docker run -p 80:80 -v /caminho/para/meu/projeto/php:/src wfsilva/nginx-phpfpm /run.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Mesmo que o container não esteja na minha máquina ele será baixado do meu repositório no docker hub.&lt;/p&gt;

&lt;p&gt;O caminho para os fontes do projeto (opção -v) vai ser montada em &lt;em&gt;/src&lt;/em&gt; que também foi configurado como path para nosso virtualhost. A porta 80 foi mapeada para que possamos acessar e o comando que executamos foi o script &lt;em&gt;run.sh&lt;/em&gt; que inicia o php-fpm e o Nginx.&lt;/p&gt;

&lt;p&gt;Podemos adicionar o nosso virtualhost em nosso arquivo de hosts
Se for mac sugiro usar o boot2docker ip ou o docker-machine ip:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;echo &amp;quot;`boot2docker ip` teste.dev&amp;quot; | sudo tee -a  /etc/hosts
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;echo &amp;quot;`docker-machine ip` teste.dev&amp;quot; | sudo tee -a  /etc/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Se for linux:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;echo &amp;quot;127.0.0.1 teste.dev&amp;quot; | sudo tee -a  /etc/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Se for Windows, bom você deve saber onde fica seu arquivo de hosts. Se não souber pode perguntar.&lt;/p&gt;

&lt;p&gt;Acessando &lt;em&gt;http://testes.dev&lt;/em&gt; batemos em nosso container que responde acessando os arquivos mapeados em nossa maquina “host”.&lt;/p&gt;

&lt;h2 id=&quot;montando-container-com-dockerfile&quot;&gt;Montando container com Dockerfile&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive img-thumbnail pull-left&quot; title=&quot;Cool meme&quot; alt=&quot;Cool meme&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/cool.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para mim esse é o jeito mais legal porque com um simples arquivo e com instruções simples montamos um container. Todos os comandos possíveis, e não são muitos, num Dockerfile estão em &lt;a href=&quot;https://docs.docker.com/reference/builder/&quot; target=&quot;_blank&quot;&gt;https://docs.docker.com/reference/builder/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Também acho legal porque posso montar um repositório no Github ou no Bitbucket com meu Dockerfile e demais arquivos que ele precisa para “buildar” (eu e esses neologismos gringos, aff) e criar um repositório no Dockerhub apontando para esse repositório Git.
O Dockerhub vai procurar esses arquivos e tentar buildar um container, e a cada push feito para seu Github ou Bitbucket criado o Dockerhub vai tentar buildar novamente.&lt;/p&gt;

&lt;p&gt;Como exemplo segue esse Dockerfile disponível em &lt;a href=&quot;https://github.com/wsilva/nginx-php-fpm-docker&quot; target=&quot;_blank&quot;&gt;https://github.com/wsilva/nginx-php-fpm-docker&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM    debian
MAINTAINER Wellington Silva &amp;lt;****@***.br&amp;gt;

# Keep upstart from complaining
RUN dpkg-divert --local --rename --add /sbin/initctl &amp;amp;&amp;amp; ln -sf /bin/true /sbin/initctl

# Let the conatiner know that there is no tty
ENV DEBIAN_FRONTEND noninteractive

# installing wget and creating /src path
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y wget &amp;amp;&amp;amp; mkdir /src

# add dotdeb source list
RUN echo &quot;deb http://packages.dotdeb.org wheezy all&quot; &amp;gt; /etc/apt/sources.list.d/dotdeb.list \
    &amp;amp;&amp;amp; echo &quot;deb-src http://packages.dotdeb.org wheezy all&quot; &amp;gt;&amp;gt; /etc/apt/sources.list.d/dotdeb.list \
    &amp;amp;&amp;amp; wget -O - http://www.dotdeb.org/dotdeb.gpg |apt-key add -

# installing php stuff
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y php5-cli php5-fpm php5-mysql php5-intl php5-xdebug php5-recode \
    php5-snmp php5-mcrypt php5-memcache php5-memcached php5-imagick php5-curl php5-xsl php5-snmp \
    php5-dev php5-tidy php5-xmlrpc php5-gd php5-pspell php-pear php-apc nginx

# setting up php.ini, fpm pool conf and nginx.conf
RUN sed -i &quot;s/;date.timezone =/date.timezone = America\/Sao_Paulo/&quot; /etc/php5/cli/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/;date.timezone =/date.timezone = America\/Sao_Paulo/&quot; /etc/php5/fpm/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/short_open_tag = On/short_open_tag = Off/&quot; /etc/php5/cli/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/short_open_tag = On/short_open_tag = Off/&quot; /etc/php5/fpm/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/error_reporting = E_ALL &amp;amp; ~E_DEPRECATED &amp;amp; ~E_STRICT/error_reporting = E_ALL/&quot; /etc/php5/cli/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/error_reporting = E_ALL &amp;amp; ~E_DEPRECATED &amp;amp; ~E_STRICT/error_reporting = E_ALL/&quot; /etc/php5/fpm/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/display_errors = Off/display_errors = On/&quot; /etc/php5/cli/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/display_errors = Off/display_errors = On/&quot; /etc/php5/fpm/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/display_startup_errors = Off/display_startup_errors = On/&quot; /etc/php5/cli/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/display_startup_errors = Off/display_startup_errors = On/&quot; /etc/php5/fpm/php.ini \
    &amp;amp;&amp;amp; sed -i &quot;s/www-data;/www-data;\\ndaemon off;/g&quot; /etc/nginx/nginx.conf

COPY run.sh /run.sh
RUN chmod a+x /run.sh

# virtualhosts configuration
COPY teste.dev.conf /etc/nginx/sites-available/teste.dev.conf

RUN ln -sf /etc/nginx/sites-available/teste.dev.conf /etc/nginx/sites-enabled/teste.dev.conf

# removing deb files
RUN apt-get clean

EXPOSE 80:80

ENTRYPOINT [&quot;/run.sh&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esse é o run.sh que é copiado para dentro do container durante o build, também disponível no Github:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
/etc/init.d/php5-fpm restart &amp;amp;&amp;amp; nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E esse o teste.dev.conf, também copiado para dentro:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {

  server_name teste.dev;

  client_max_body_size  5m;
  client_header_timeout 1200;
  client_body_timeout   1200;
  send_timeout          1200;
  keepalive_timeout     1200;

  root        /src/;
  try_files   $uri $uri/ /index.php?$args;
  index       index.php;

  location ~ \.php$ {
    fastcgi_pass    unix:/var/run/php5-fpm.sock;
    fastcgi_index   index.php;
    include         fastcgi_params;

    fastcgi_connect_timeout 1200;
    fastcgi_send_timeout    7200;
    fastcgi_read_timeout    7200;
    fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O repositório no Dockerhub que monitora esse github é o &lt;a href=&quot;https://registry.hub.docker.com/u/wfsilva/nginx-php-fpm-docker/&quot;&gt;https://registry.hub.docker.com/u/wfsilva/nginx-php-fpm-docker/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você não quiser utilizar o Dockerhub basta ir até a pasta onde gravou o seu Dockerfile e rodar o comando:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker build -t wfsilva/nginx-php-fpm-home-build ./
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A opção -t é para criar a tag, e como pode imaginar a parte &lt;em&gt;wfsilva/nginx-php-fpm-home-build&lt;/em&gt; foi por minha conta. E para a minha conta (no dockerhub).&lt;/p&gt;

&lt;h3 id=&quot;dicas&quot;&gt;Dicas&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Sempre use tags para construir seus container, senão você ficará louco com os hashes:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker build -t yabadaba/dooo ./path/to/wherever/dockerfile/is
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sempre use o cache de imagens - cada instrução do Dockerfile é reutilizada no build, portanto o build vai ser praticamente instantâneo até o ponto onde foi feita a mudança no seu dockerfile.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EXPOSE-ing ports - tentar não mapear portas públicas para evitar colisão com portas de serviços que estejam rodando no host. Ao invés de &lt;em&gt;-p 80:80&lt;/em&gt; ou EXPOSE 80:80 utilizemos -p 80 ou EXPOSE 80&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CMD e ENTRYPOINT -  sempre usar a sintaxe de array: &lt;em&gt;CMD [“/bin/echo”]&lt;/em&gt; porque quando colocamos &lt;em&gt;CMD /bin/echo&lt;/em&gt; automaticamente no container vai ser colocado um /bin/sh -c antes do comando.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tentar usar CMD e ENTRYPOINT juntos - o entry point é tipo um binário, se nenhum parâmetro for passado o cmd seguinte será chamado. ex:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;ENTRYPOINT [&amp;quot;/usr/bin/script&amp;quot;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;CMD [&amp;quot;--help&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Ao rodar o container só chamando o script &lt;em&gt;/usr/bin/script&lt;/em&gt; ele será executado com a opção &lt;em&gt;–help&lt;/em&gt;. Se executarmos com alguma outra opção qualquer, &lt;em&gt;–verbose&lt;/em&gt; por exemplo, o &lt;em&gt;–help&lt;/em&gt; será ignorado.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Se você se cansar de testar e quiser fazer uma limpa geral &lt;em&gt;docker rm $(docker ps -a -q)&lt;/em&gt; para remover todos containers parados e &lt;em&gt;docker rmi $(docker images -q)&lt;/em&gt; para remover todas imagens.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Para mostrar histórico das imagens: &lt;em&gt;docker images –tree&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;docker run - inicia / executa o container.&lt;/li&gt;
  &lt;li&gt;docker exec - executa um outro comando ou entra em um container que já esteja rodando.&lt;/li&gt;
  &lt;li&gt;docker attach - te anexa no shell do container que esteja rodando&lt;/li&gt;
  &lt;li&gt;Reforçando Container vs Imagem - Container é a “imagem que está rodando”, não vai esquecer mais.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;To Be Continued&lt;/h2&gt;
&lt;p&gt;Ainda abordaremos como utilizar o docker em ambiente Windows e Mac (boot2docker e docker-machine), orquestração de containers usando fig (agora docker-composer), e as novidades (já em beta e liberadas para teste) anunciadas na Dockercon em dezembro de 2014 para a próxima versão do docker: (docker-machine, docker-composer, docker-swarm).&lt;/p&gt;

&lt;p&gt;Té +&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-08T03:00:00+00:00</dc:date>
</item>
<item rdf:about="http://stefanteixeira.com.br/tag/devops/rss/7b2c242d-a97d-4e01-911f-c9bceeee6d90">
	<title>Stefan Teixeira: Pipelines complexos no Jenkins com BuildFlow Plugin</title>
	<link>http://stefanteixeira.com.br/2015/03/06/pipelines-complexos-no-jenkins-com-buildflow-plugin/</link>
	<content:encoded>&lt;p&gt;Neste post, vou mostrar o plugin que uso para criar pipelines de build no Jenkins, o &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin&quot;&gt;BuildFlow Plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;umpoucosobrepipelines&quot;&gt;Um pouco sobre pipelines&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.casadocodigo.com.br/products/livro-devops&quot;&gt;No livro &quot;DevOps na prática&quot;&lt;/a&gt;, o &lt;a href=&quot;https://twitter.com/dtsato&quot;&gt;Danilo Sato&lt;/a&gt; descreve uma ótima definição sobre um pipeline de entrega:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&quot;Um pipeline de entrega é uma manifestação automatizada do processo de entrega de software, desde uma mudança até sua implantação em produção. Ele modela as etapas automatizadas e manuais do processo de entrega e é uma extensão natural da prática de integração contínua.&quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A figura abaixo, retirada do excelente livro &lt;a href=&quot;http://www.amazon.com.br/Continuous-Delivery-Deployment-Automation-Addison-Wesley-ebook/dp/B003YMNVC0&quot;&gt;&quot;Continuous Delivery&quot;&lt;/a&gt;, mostra um exemplo de pipeline. Na imagem, é possível ver que o pipeline possui etapas como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build e testes de unidade&lt;/li&gt;
&lt;li&gt;Testes de aceitação automatizados&lt;/li&gt;
&lt;li&gt;Testes de aceitação de usuário&lt;/li&gt;
&lt;li&gt;Release&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Continuous_Delivery_process_diagram.png&quot; alt=&quot;pipeline cd&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;masperajnoexisteobuildpipelineplugin&quot;&gt;Mas peraí... já não existe o Build Pipeline Plugin?&lt;/h4&gt;

&lt;p&gt;O &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Build+Pipeline+Plugin&quot;&gt;Build Pipeline Plugin&lt;/a&gt; é o plugin mais utilizado para esse fim. Ele oferece uma visualização bastante razoável, como podemos ver abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/bpp1.png&quot; alt=&quot;buildpipePlugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Porém&lt;/strong&gt;, existem vários fatores que me fizeram desistir de usá-lo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Pipelines são criados através de dependências upstream/downstream entre jobs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Isso significa que, para o funcionamento do plugin, seus jobs devem ter dependências entre eles. Considerando o pipeline que vimos na seção anterior, essas dependências funcionariam mais ou menos assim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;O job &quot;Build e testes de unidade&quot; deverá ter um passo pós-build com trigger para o job &quot;Testes de aceitação automatizados&quot; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OU&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;O job &quot;Testes de aceitação automatizados&quot; deverá ser executado somente quando o job &quot;Build e testes de unidade&quot; terminar.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Em um pipeline simples como o da seção anterior, criar essas dependências não seria tão &quot;doloroso&quot;. Entretanto, quando trabalhamos com pipelines mais complexos (com etapas em paralelo, forks, joins, etc.), isso se torna um problema. Além disso, é comum termos que utilizar outros plugins para nos auxiliar, como o &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Join+Plugin&quot;&gt;Join Plugin&lt;/a&gt;, o &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin&quot;&gt;Parameterized Trigger Plugin&lt;/a&gt;, entre outros, o que torna a configuração dos nossos jobs &lt;strong&gt;extremamente poluída&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Incluir uma nova etapa no pipeline é frustrante&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Imagine que eu queira incluir um novo job no pipeline, mas de forma que fique &lt;strong&gt;entre&lt;/strong&gt; dois jobs já existentes. Vou precisar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configurar o novo job&lt;/li&gt;
&lt;li&gt;Ajustar o job anterior ao novo&lt;/li&gt;
&lt;li&gt;Ajustar o job posterior ao novo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quanto mais complexo seu pipeline fica, mais difícil se torna a manutenção dos jobs. E mais: já parou para pensar que a lógica de criação do seu pipeline está &lt;strong&gt;espalhada&lt;/strong&gt; em vários jobs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Executar jobs de forma isolada se torna uma dor de cabeça&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quando estava começando a criar os pipelines que uso diariamente, muitas vezes precisei rodar jobs isoladamente, sem que isso desencadeasse na execução do pipeline inteiro. Como cada job possui um trigger para outro, eu tinha duas opções:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remover o trigger temporariamente (e lembrar de colocar de volta!). Depois de algumas vezes, isso se torna muito maçante.&lt;/li&gt;
&lt;li&gt;Criar um job duplicado, sem conter nada relacionado à lógica do pipeline.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Bugs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Caso seu pipeline tenha passos executados em paralelo, forks ou joins, a visualização &lt;strong&gt;quebra&lt;/strong&gt;. Ou seja, o que você visualiza acaba &lt;strong&gt;não&lt;/strong&gt; representando o seu pipeline.&lt;/p&gt;

&lt;p&gt;Outro bug conhecido: jobs triggados por plugins como o &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Promoted+Builds+Plugin&quot;&gt;Promoted Builds Plugin&lt;/a&gt; não aparecem na visualização. &lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;okmasentocomoobuildflowpluginfunciona&quot;&gt;OK, mas então como o BuildFlow Plugin funciona?&lt;/h4&gt;

&lt;p&gt;O &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin&quot;&gt;BuildFlow&lt;/a&gt; oferece uma &lt;a href=&quot;http://martinfowler.com/books/dsl.html&quot;&gt;DSL (Domain Specific Language)&lt;/a&gt; para orquestrar seus pipelines, de forma clara e simples.&lt;/p&gt;

&lt;p&gt;O plugin é bastante extensível, mas os recursos básicos já são suficientes para montar pipelines interessantes. A página do plugin explica com mais detalhes cada comando, além de mostrar extensões criadas e como criar a sua própria extensão. Também recomendo consultar a &lt;a href=&quot;https://github.com/jenkinsci/build-flow-plugin&quot;&gt;página do projeto no GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Os comandos básicos são:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Build&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para fazer o build de um job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;build(&quot;nome_do_job&quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Caso o seu job seja parametrizado, você também pode passar os parâmetros que desejar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;build(&quot;nome_do_job&quot;, parametro1:TRUE, parametro2:&quot;param&quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. Parallel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para executar dois ou mais jobs em paralelo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;parallel (  
    { build(&quot;job1&quot;) },
    { build(&quot;job2&quot;) },
    { build(&quot;job3&quot;) }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3. Retry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Caso um job possa gerar um falso negativo, você pode usar o comando &lt;strong&gt;retry&lt;/strong&gt; para que o plugin tente executá-lo novamente.&lt;/p&gt;

&lt;p&gt;Para rodar um job novamente, caso ele falhe:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;retry(2) {  
    build(&quot;job_que_pode_falhar&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4. Ignore&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para ignorar o resultado de um job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;ignore(FAILURE) {  
    build(&quot;nome_do_job&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OBS: Além de &lt;strong&gt;FAILURE&lt;/strong&gt;, tambem é possível ignorar os estados &lt;strong&gt;UNSTABLE&lt;/strong&gt; e &lt;strong&gt;ABORTED&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Guard/Rescue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Esse comando funciona como um bloco try/finally. Caso você precise rodar um job de cleanup depois que um ou mais jobs executem (mesmo que eles falhem):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;guard {  
    build(&quot;job_que_pode_falhar&quot;)
} rescue {
    build(&quot;cleanup&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;instalao&quot;&gt;Instalação&lt;/h4&gt;

&lt;p&gt;Para instalar o plugin, vá até a opção &quot;Gerenciar Jenkins&quot; na página inicial e, em seguida, na opção &quot;Gerenciar plugins&quot;. Clique na aba &quot;Disponíveis&quot; e busque por &quot;build flow plugin&quot;, conforme a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-01-at-23-22-56.png&quot; alt=&quot;plugin install&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Também é necessário instalar o plugin &quot;Build Graph View&quot;, que gera uma visualização do nosso pipeline. Com isso, busque também por &quot;build graph&quot; e instale o plugin, conforme a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-05-at-22-42-41.png&quot; alt=&quot;build graph install&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;criandoevisualizandoumpipeline&quot;&gt;Criando e Visualizando um Pipeline&lt;/h4&gt;

&lt;p&gt;Para criar um novo pipeline, basta clicar em &quot;Novo item&quot; na página inicial, dar um nome e selecionar a opção &quot;Build Flow&quot;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-00-53-33.png&quot; alt=&quot;new flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Os comandos para orquestrar seu pipeline devem ser informados na seção &lt;strong&gt;Flow&lt;/strong&gt; da página de configuração:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-00-58-01.png&quot; alt=&quot;flow instructions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Após a execução de um pipeline, você pode visualizá-lo selecionando a opção &lt;strong&gt;Build Graph&lt;/strong&gt; dentro do build:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-01-03-57.png&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;exemplos&quot;&gt;Exemplos&lt;/h4&gt;

&lt;h6 id=&quot;1pipelinesimples&quot;&gt;1) Pipeline simples&lt;/h6&gt;

&lt;p&gt;Considere uma aplicação chamada App1, cujo pipeline consiste nas seguintes etapas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build e Testes de Unidade&lt;/li&gt;
&lt;li&gt;Deploy para ambiente de QA&lt;/li&gt;
&lt;li&gt;Testes de UI&lt;/li&gt;
&lt;li&gt;Release&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como ficaria esse pipeline com o BuildFlow plugin?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;build(&quot;Build e Testes de Unidade&quot;)  
build(&quot;Deploy para ambiente de QA&quot;)  
build(&quot;Testes de UI&quot;)  
build(&quot;Release&quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A visualização gerada seria (os nomes dos jobs estão em inglês):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-01-25-10.png&quot; alt=&quot;exemplo1&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;2pipelineumpoucomaiscomplexo&quot;&gt;2) Pipeline um pouco mais complexo&lt;/h6&gt;

&lt;p&gt;Considere uma aplicação chamada App2, cujo pipeline consiste nas seguintes etapas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build e Testes de Unidade&lt;/li&gt;
&lt;li&gt;Testes de Integração&lt;/li&gt;
&lt;li&gt;Deploy para ambiente de QA &lt;strong&gt;(1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Testes de API &lt;strong&gt;(1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Deploy para ambiente de Performance &lt;strong&gt;(2)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Testes de Performance &lt;strong&gt;(2)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Release&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para executarmos essas etapas sequencialmente, basta fazer o mesmo que o exemplo anterior. Repare que as etapas marcadas com &lt;strong&gt;(1)&lt;/strong&gt; e &lt;strong&gt;(2)&lt;/strong&gt; poderiam ser executadas em paralelo, certo?&lt;/p&gt;

&lt;p&gt;Vamos utilizar o comando &lt;strong&gt;parallel&lt;/strong&gt; para isso:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;build(&quot;Build e Testes de Unidade&quot;)  
build(&quot;Testes de Integração&quot;)

parallel (  
  { 
    build(&quot;Deploy para ambiente de QA&quot;)
    build(&quot;Testes de API&quot;) 
  },
  { 
    build(&quot;Deploy para ambiente de Performance&quot;)
    build(&quot;Testes de Performance&quot;)
  }
)

build(&quot;Release&quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A visualização ficaria assim:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-01-41-28.png&quot; alt=&quot;exemplo2&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;3pipelinedepipelinespipelineception&quot;&gt;3) Pipeline de Pipelines (pipelineception)&lt;/h6&gt;

&lt;p&gt;Suponha que ambas as aplicações App1 e App2 utilizem o mesmo banco de dados (criado por um job chamado &quot;Criar Banco de Dados&quot;) e que eu queira um &lt;del&gt;megazord&lt;/del&gt; pipeline que rode o job de criação do banco &lt;strong&gt;E&lt;/strong&gt; os pipelines das aplicações (em paralelo!).&lt;/p&gt;

&lt;p&gt;Peraí, posso fazer pipeline de pipelines? &lt;strong&gt;SIM!&lt;/strong&gt; :)&lt;/p&gt;

&lt;p&gt;Nosso pipeline gigante seria:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;build(&quot;Criar Banco de Dados&quot;)

parallel (  
    {
        build(&quot;App1 - Build Pipeline&quot;)
    },
    {
        build(&quot;App2 - Build Pipeline&quot;)
    }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A visualização ficaria assim:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-01-58-33.png&quot; alt=&quot;exemplo3&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;obuildflowplugintambmsuportapassosmanuais&quot;&gt;O BuildFlow Plugin também suporta passos manuais?&lt;/h4&gt;

&lt;p&gt;Infelizmente, o BuildFlow não tem suporte a passos manuais. Entretanto, você pode combinar o BuildFlow Plugin com o BuildPipeline Plugin para isso.&lt;/p&gt;

&lt;p&gt;Considere a nossa aplicação App1 e o pipeline que fizemos no exemplo 1. Suponha que, após a etapa de Release, eu deva ter uma etapa manual de Deploy para Produção (ou seja, um pipeline de Continuous Delivery). Como eu poderia fazer isso?&lt;/p&gt;

&lt;p&gt;Caso não tenha o BuildPipeline Plugin instalado, instale-o da mesma forma que instalamos os outros plugins. Na seção &quot;Ações pós-builds&quot; do pipeline &quot;App1&quot;, selecione a opção &quot;Build other projects (manual step)&quot; e informe o job que deseja rodar manualmente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-02-10-36.png&quot; alt=&quot;manual step&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na página inicial, clique na aba &quot;&lt;strong&gt;+&lt;/strong&gt;&quot; para adicionar uma nova view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-02-14-02.png&quot; alt=&quot;new vis&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Selecione a opção &quot;Build Pipeline view&quot;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-02-15-15.png&quot; alt=&quot;new pipe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No campo &quot;Select Initial Job&quot;, selecione o flow que representa o pipeline inicial da App1 e clique em OK:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-02-16-01.png&quot; alt=&quot;pipe conf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Você verá o pipeline composto pelo anterior (com BuildFlow) &lt;strong&gt;e&lt;/strong&gt; o job manual:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2015/03/Screen-Shot-2015-03-06-at-02-17-51.png&quot; alt=&quot;flow plus pipe&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;concluso&quot;&gt;Conclusão&lt;/h4&gt;

&lt;p&gt;Com o BuildFlow, não se torna mais necessário poluir a configuração dos jobs com a lógica de criação do nosso pipeline. O plugin oferece uma DSL extremamente simples e com inúmeras possibilidades.&lt;/p&gt;

&lt;p&gt;Não deixe de conferir a seção de Referências. Qualquer dúvida ou sugestão, entre em contato ou comente no final do post.&lt;/p&gt;

&lt;p&gt;Abraços! :)&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;referncias&quot;&gt;Referências&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin&quot;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/jenkinsci/build-flow-plugin&quot;&gt;https://github.com/jenkinsci/build-flow-plugin&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Build+Graph+View+Plugin&quot;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Build+Graph+View+Plugin&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.infoq.com/articles/orch-pipelines-jenkins&quot;&gt;http://www.infoq.com/articles/orch-pipelines-jenkins&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912&quot;&gt;http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://www.coveros.com/using-the-build-flow-plugin-in-jenkins/&quot;&gt;https://www.coveros.com/using-the-build-flow-plugin-in-jenkins/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Sobre o autor:&lt;/strong&gt; Stefan Teixeira trabalha como QA Engineer e, desde o final de 2014, tem se aventurado no mundo DevOps. É Bacharel em Ciência da Computação pela UFRJ e MBA em Garantia de Qualidade de Software pela Escola Politécnica da UFRJ. Entusiasta de Testes Automatizados (e de tudo que possa ser automatizado!), Agile Testing e da cultura DevOps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contatos:&lt;/strong&gt; stefanfk@gmail.com | &lt;a href=&quot;https://twitter.com/stefan_teixeira&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://br.linkedin.com/in/stefanteixeira&quot;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-06T05:26:02+00:00</dc:date>
</item>
<item rdf:about="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-basico.html">
	<title>Wellington Silva: Docker, do Básico a Orquestração e Clusterização - 2. Básico</title>
	<link>http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-basico.html</link>
	<content:encoded>&lt;p&gt;Nessa série de artigos estamos abordando tópicos para uma boa utilização do &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;.
&lt;img class=&quot;img-responsive img-thumbnail pull-left&quot; title=&quot;Docker Logo&quot; alt=&quot;Docker Logo&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/lxc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dando continuidade ao artigo anterior com introdução sobre o que é docker e como funciona agora abordaremos como utilizar o Docker: baixar imagens, rodar containers, monitorar, versionar, manipular imagens criadas, criar imagens com base em arquivo com receitas (Dockerfiles), principais comandos e dicas de boas práticas baseando em dificuldades e gotchas que tenho enfrentado.&lt;/p&gt;

&lt;!--continua--&gt;

&lt;h2 id=&quot;instalao&quot;&gt;Instalação&lt;/h2&gt;
&lt;p&gt;Não vou abordar a instalação aqui, cada sistema operacional tem sua maneira de instalar, alguns tem mais de uma maneira.&lt;/p&gt;

&lt;p&gt;Ubuntu por exemplo tem o docker dos sources lists próprios mas o recomendado é utilizar o source list do próprio repositório do Docker.&lt;/p&gt;

&lt;p&gt;Algumas versões de Fedora tem tweaks por causa do SELinux.&lt;/p&gt;

&lt;p&gt;Para MacOS e Windows temos o boot2docker mas novidades estão vindo e teremos na próxima versão o docker-machine (novidade serão abordadas nos próximos posts).&lt;/p&gt;

&lt;p&gt;Novidades a parte, acesse a &lt;a href=&quot;https://docs.docker.com/installation/&quot; target=&quot;_blank&quot;&gt;página de instalação do Docker&lt;/a&gt;, escolha o sistema operacional onde você vai instalar e siga a risca as instruções. Preste atenção na parte de permissionamento de usuários ou você terá que sempre rodar os comandos docker com sudo. Ex.:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ sudo docker ps
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Existe um tutorial básico e guiado onde podemos rodar os comandos no próprio site. Recomendo fazê-lo &lt;a href=&quot;https://www.docker.com/tryit/&quot;&gt;aqui&lt;/a&gt;. São 8 passos onde buscamos uma imagem, baixamos, rodamos, alteramos ela, inspecionamos e enviamos de volta ao repositório do dockerhub.&lt;/p&gt;

&lt;h2 id=&quot;o-flow&quot;&gt;O Flow&lt;/h2&gt;
&lt;p&gt;Similar ao git onde podemos baixar (pull), alterar (commit) e enviar (push), no docker também podemos baixar, alterar e enviar imagens. &lt;em&gt;Mas enviar pra onde?&lt;/em&gt; Assim como no git temos repositórios remotos como gitorious, bitbucket e o mais famoso github, no docker temos o &lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;blank&quot;&gt;dockerhub&lt;/a&gt;. Podemos montar um repositório privado nosso também.&lt;/p&gt;

&lt;p&gt;Os comandos mais básicos são o &lt;strong&gt;docker images&lt;/strong&gt; que lista as imagens que já baixamos ou construímos:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;docker images
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;debian              latest              c90d655b99b2        5 days ago          85.01 MB
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;debian              wheezy              c90d655b99b2        5 days ago          85.01 MB
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;ubuntu              latest              2d24f826cb16        12 days ago         188.3 MB
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Percebemos que temos duas entradas de Debian com tags diferentes (latest e wheezy) mas com o mesmo Image ID, ou seja é a mesma imagem.&lt;/p&gt;

&lt;p&gt;E o comando &lt;strong&gt;docker ps&lt;/strong&gt; que lista os containers que estão, ou estiveram rodando.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;docker ps
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;exerccio-similar-ao-do-tutorial-do-docker&quot;&gt;Exercício (similar ao do tutorial do docker)&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive img-thumbnail&quot; title=&quot;Exercícios&quot; alt=&quot;Exercícios&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/exercicios.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Baixando um container básico do dockerhub:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker pull debian
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;debian:latest: The image you are pulling has been verified
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;511136ea3c5a: Pulling fs layer
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;30d39e59ffe2: Download complete
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;c90d655b99b2: Download complete
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Criando um arquivo teste dentro dele:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker run debian touch /tmp/teste
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Quando fazemos isso o container roda faz a alteração e pára.&lt;/p&gt;

&lt;p&gt;Listando o último container para pegar o Container ID:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker ps -l
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                      PORTS               NAMES
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;a04e63f87349        debian:latest       &amp;quot;touch /tmp/teste&amp;quot;   13 minutes ago      Exited (0) 13 minutes ago                       happy_mayer
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Gerando uma nova imagem com essa alteração (usando o container ID):&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker commit a04e63f87349 wfsilva/teste1
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;7e74615a398990c8af6d2e20c39d447f81ca23af257db19680419fc52d6fed03
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Enviando essa imagem para sua conta (a minha é wfsilva, por isso dei o nome de wfsilva/teste1) no docker hub:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker push wfsilva/teste1
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;The push refers to a repository [wfsilva/teste1] (len: 1)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;Sending image list
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;Please login prior to push:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;Username: wfsilva
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;Password:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;Email: ****@***.br
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;Login Succeeded
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;The push refers to a repository [wfsilva/teste1] (len: 1)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;Sending image list
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;Pushing repository wfsilva/teste1 (1 tags)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;c90d655b99b2: Image already pushed, skipping
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;...
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;7e74615a3989: Image successfully pushed
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;Pushing tag for rev [7e74615a3989] on {https://cdn-registry-1.docker.io/v1/repositories/wfsilva/teste1/tags/latest}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Fim de exercício&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;dicas&quot;&gt;Dicas&lt;/h2&gt;
&lt;p&gt;### Containers vs Images
Sempre confundi mas pensando que imagens são estáticas e os container são dinâmicos ficou fácil. Quando rodamos uma imagem temos um container. Quando gravamos as alterações de um container temos uma nova imagem.&lt;/p&gt;

&lt;h3 id=&quot;alterando-um-container&quot;&gt;Alterando um container:&lt;/h3&gt;
&lt;p&gt;Uma outra maneira de alterarmos um container é rodarmos passando o comando bash:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker run -it debian bash
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;root@504451ee512c:/#
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Esse comando vai te retornar o bash do container onde você fica mais livre para fazer suas alterações com a vantagem do shell interativo (opção i), do tty (opção t) e do auto complete. Depois saia do container (com o comando exit ou atalho ctrl + d) e poderá gerar uma nova imagem da mesma maneira.&lt;/p&gt;

&lt;h3 id=&quot;layers&quot;&gt;Layers:&lt;/h3&gt;
&lt;p&gt;O Docker trabalha com camadas de imagens, cada alteração gravada é uma nova imagem&lt;/p&gt;

&lt;p&gt;Nos exemplos acima se rodarmos a imagem alterada teremos o container com o arquivo de teste lá:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker run wfsilva/teste1 ls /tmp
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;teste
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Mas se rodarmos a base image do debian as alterações são perdidas:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker run debian ls /tmp
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;emagrecendo-containers&quot;&gt;Emagrecendo Containers&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive img-thumbnail&quot; title=&quot;Emagrecendo Container&quot; alt=&quot;Emagrecendo Container&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/flattern-container.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O comando save grava uma imagem em arquivo e o load carrega de volta preservando todo histórico:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker save &amp;lt;IMAGE NAME&amp;gt; &amp;gt; /tmp/image.tar
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ docker load &amp;lt; /tmp/image.tar
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;O comando export exporta um container em arquivo e o import carrega de volta forçando a perda do histórico:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker export &amp;lt;CONTAINER ID&amp;gt; &amp;gt; /tmp/container.tar
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;$ cat /tmp/container.tar | docker import - novo-nome:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A vantagem de perder o histórico é que o o container fica mais leve, o que podemos conferir com o comando:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker images --tree
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;limpando-testes&quot;&gt;Limpando testes&lt;/h3&gt;
&lt;p&gt;Para remover containers utilizamos o comando:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker rm &amp;lt;CONTAINER ID&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;E para remover imagens utilizamos:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker rmi &amp;lt;IMAGE ID&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;vida-quase-real&quot;&gt;Vida quase real:&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive img-thumbnail&quot; title=&quot;Vida Real&quot; alt=&quot;Vida Real&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/real-life.jpg&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;http://dumpscerebrais.com.br/feed.xml#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;$ docker run -it --rm --name yabadabadoo -p 80:80 -v /path/para/aplicacao:/var/www/html php:5.6-apache --privileged
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Esse comando vai baixar a imagem base do container php, tag 5.6-apache, vai rodar de maneira interativa e com terminal, vai montar o caminho do meu projeto para dentro de /var/www/html que está dentro do container, vai rodar com flag privileged para adicinar permissões de escrita, vai mapear a porta 80 do container para a porta 80 da máquina host e quando o container for finalizado as alterações feitas no container serão removidas.&lt;/p&gt;

&lt;p&gt;Mais próximo da realidade só montando um parque de containers com diversos serviços se comunicando, e isso será assunto para os próximos artigos.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;To Be Continued&lt;/h2&gt;
&lt;p&gt;Ainda abordaremos como utilizar o docker em ambiente Windows e Mac, como contruir um container através de um arquivo com receita (Dockerfile), orquestração de containers usando fig, e as novidades (já em beta e liberadas para teste) anunciadas na Dockercon em dezembro de 2014 para a próxima versão do docker.&lt;/p&gt;

&lt;p&gt;Té +&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-05T03:00:00+00:00</dc:date>
</item>
<item rdf:about="http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-introducao.html">
	<title>Wellington Silva: Docker, do Básico a Orquestração e Clusterização - 1. Introdução</title>
	<link>http://dumpscerebrais.com.br/2015/03/docker-do-basico-a-orquestracao-e-clusterizacao-introducao.html</link>
	<content:encoded>&lt;p&gt;Nessa série de artigos abordaremos tópicos para uma boa utilização do &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;.
&lt;img class=&quot;img-responsive img-thumbnail pull-left&quot; title=&quot;Docker Logo&quot; alt=&quot;Docker Logo&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/docker-logo.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se você desenvolve ou desenvolveu para web deve ter esbarrado em problemas de configuração de ambiente ou padronização de ambientes para desenvolvedores, homologação e produção. Se pesquisou a respeito então provavelmente já ouviu falar sobre Docker, &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;, ou pelo menos &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Primeiramente vamos definir alguns conceitos.&lt;/p&gt;

&lt;!--continua--&gt;

&lt;h2 id=&quot;virtualizao&quot;&gt;Virtualização&lt;/h2&gt;

&lt;p&gt;Sem muitos rodeios é quando criamos um ambiente que roda sobre outro, e pode ser montado direto no hardware (Bare Metal) como no Xen, VMware, Hyper-V, ou via software (Hosted) como no Virtualbox, Paralel Desktops.
Resumindo seja é um carinha que virtualiza a arquitetura de um PC e você pode literalmente instalar um sistema operacional em cima dele.&lt;/p&gt;

&lt;h2 id=&quot;host--guest&quot;&gt;Host / Guest&lt;/h2&gt;
&lt;p&gt;Na vitualização tipo &lt;strong&gt;Hosted&lt;/strong&gt;, o &lt;strong&gt;Host&lt;/strong&gt; é o sistema operacional que está rodando no hardware e &lt;strong&gt;Guest&lt;/strong&gt; é o sistema instalado.&lt;/p&gt;

&lt;h2 id=&quot;virtualbox&quot;&gt;Virtualbox&lt;/h2&gt;
&lt;p&gt;No mundo &lt;em&gt;Dev o Software de Virtualização mais popular e ultilizado é o Virtualbox&lt;/em&gt;, que &lt;em&gt;roda&lt;/em&gt; em sistemas Linux, Windows e MacOS entre outros. No Virtualbox podemos criar uma &lt;em&gt;maquina-virtual&lt;/em&gt; e literalmente instalar qualquer &lt;em&gt;Distro Linux&lt;/em&gt; ou &lt;em&gt;versão do Windows&lt;/em&gt; nele.&lt;/p&gt;

&lt;h2 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;Para tornar o uso do Virtualbox mais fácil para os desenvolvedores web o Vagrant, com ou sem ajuda de ferramentas como o puppet ou o chef, torna mais fácil provisionarmos um ambiente que seja idêntico ao ambiente que vai rodar em produção e compartilhar o código produzido na máquina host com a máquina guest (normalmente servidor linux)&lt;/p&gt;

&lt;h2 id=&quot;t-mas-e-o-docker&quot;&gt;Tá, mas e o Docker?&lt;/h2&gt;
&lt;p&gt;O Docker é um cara que entra onde a virtualização é um problema, na performance. Para ficar mais fácil de explicar veja a imagem abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive img-thumbnail&quot; title=&quot;Virtualização vs LXC&quot; alt=&quot;Virtualização vs LXC&quot; src=&quot;http://dumpscerebrais.com.br/assets/images/virtualizaca-vs-containers.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O Docker utiliza o esquema de LXC (Linux Containers) para rodar somente a parte que interessa do Guest OS e compartilhar parte dos recursos do kernel do sistema operacional Host.&lt;/p&gt;

&lt;p&gt;Há quem diga que LXC é um tipo de virtualização, e outros mais ortodoxos dizem que não. Se quiser estude e me conta, porque na verdade isso no momento não me interessa muito, o que me interessa é que desse jeito subir um sistema é absurdamente rápido e leve.&lt;/p&gt;

&lt;p&gt;O LXC permite que recursos, libs e configurações sejam “aprisionados” (é isso aí, e tem caras falam enjaulados tbm)
em um path e isolados através de namespaces e chroot e rode como um processo.&lt;/p&gt;

&lt;p&gt;Com a ajuda do AuFS (sistema de arquivos em camadas e que gerencia recursos de rede também) o Docker funciona como uma camada sobre o LXC, praticamente uma API.&lt;/p&gt;

&lt;h2 id=&quot;vantagens&quot;&gt;Vantagens:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Sobe muuuuiiiitttoooo rápido - não precisamos do Guest OS todo.&lt;/li&gt;
  &lt;li&gt;Isola o sistema - chroot e processo único.&lt;/li&gt;
  &lt;li&gt;Fácil replicação - é tudo linux, é só pegar a imagem, subir em outro ambiente e mandar rodar o container dessa imagem.&lt;/li&gt;
  &lt;li&gt;Facilita a utilização dos Linux Containers - Subir um container LXC na unha dá muito mais trabalho que no Docker.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;desvantagens&quot;&gt;Desvantagens:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Overhead de entrada e saída - Demanda muita escrita e leitura.&lt;/li&gt;
  &lt;li&gt;Não tão isolado - há recursos do Kernel do sistema Host que são compartilhados, por mais seguro que seja pode ser passível de algum ataque bem sofisticado.&lt;/li&gt;
  &lt;li&gt;Só Linux: desvantagem que considero questionável já que são raros os webservers rodando Windows, e também nunca vi webservers rodando Unix, Solaris, Mac (imagina o preço de um servidor Mac).
(obs: Se você usa Mac ou Windows como maquinha de Dev, é possível usar o Docker com o Boot2Docker ou o Docker-Machine. Veremos mais desse assunto no próximo artigo).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adequando-o-vocabulrio&quot;&gt;Adequando o vocabulário&lt;/h2&gt;
&lt;p&gt;No mundo LXC e do Docker não dizemos que temos um Guest OS, dizemos que temos um container. Também não temos snapshots, temos imagens.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;To Be Continued&lt;/h2&gt;
&lt;p&gt;No próximo artigo vamos mostrar o básico do mundo dos containers.&lt;/p&gt;</content:encoded>
	<dc:date>2015-03-04T03:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.ricardomartins.com.br/?p=5350">
	<title>Ricardo Martins: AWS: Criando AMI da sua instância usando o Data Pipeline</title>
	<link>http://www.ricardomartins.com.br/aws-criando-ami-da-sua-instancia-usando-o-data-pipeline/</link>
	<content:encoded>&lt;p&gt;Depois do post demonstrando como criar uma AMI da sua instância utilizando um script shell de dentro de um bastion host (http://www.ricardomartins.com.br/aws-script-para-geracao-automatica-de-ami-de-instancia/), neste post vou mostrar como utilizar o DataPipeline para fazer a mesma tarefa. O Data Pipeline é um serviço web que ajuda na automação de atividades de movimentação, integração e processamento de dados [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;O post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br/aws-criando-ami-da-sua-instancia-usando-o-data-pipeline/&quot;&gt;AWS: Criando AMI da sua instância usando o Data Pipeline&lt;/a&gt; apareceu primeiro em &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br&quot;&gt;Ricardo Martins&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-02-25T00:38:37+00:00</dc:date>
</item>
<item rdf:about="http://www.ricardomartins.com.br/?p=5318">
	<title>Ricardo Martins: AWS: Script para geração automática de AMI de instância</title>
	<link>http://www.ricardomartins.com.br/aws-script-para-geracao-automatica-de-ami-de-instancia/</link>
	<content:encoded>&lt;p&gt;Se você administra servidores na nuvem da AWS, certamente este script irá te auxiliar bastante a automatizar a geração da AMI da sua instância. O AMI é uma imagem da sua instância que você pode utilizar em caso de recuperação de desastres. Você pode utilizar uma instância com a função de bastion host para executá-lo. [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;O post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br/aws-script-para-geracao-automatica-de-ami-de-instancia/&quot;&gt;AWS: Script para geração automática de AMI de instância&lt;/a&gt; apareceu primeiro em &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br&quot;&gt;Ricardo Martins&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-02-19T20:47:41+00:00</dc:date>
</item>
<item rdf:about="http://gutocarvalho.net/octopress/2015/02/04/video-webinar-puppet-modules">
	<title>Guto Carvalho: Vídeo Webinar Puppet Modules</title>
	<link>http://gutocarvalho.net/octopress/2015/02/04/video-webinar-puppet-modules/</link>
	<content:encoded>&lt;p&gt;Abaixo o vídeo do webinar de módulos, fizemos esse webinar em 2014. O objetivo é mostrar as vantagens do uso de módulos no Puppet, e também mostrar a forma correta de utilizar módulos no Puppet.&lt;/p&gt;

&lt;h2&gt;Vídeo&lt;/h2&gt;




&lt;h2&gt;Slides&lt;/h2&gt;

 


&lt;p&gt; &lt;div&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/GutoCarvalho/trabalhando-com-mdulos-no-puppet&quot; title=&quot;Trabalhando com Módulos no Puppet&quot; target=&quot;_blank&quot;&gt;Trabalhando com Módulos no Puppet&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/GutoCarvalho&quot; target=&quot;_blank&quot;&gt;Guto Carvalho&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;[s]&lt;br /&gt;
Guto&lt;/p&gt;</content:encoded>
	<dc:date>2015-02-04T11:20:00+00:00</dc:date>
</item>
<item rdf:about="http://www.ricardomartins.com.br/?p=5270">
	<title>Ricardo Martins: DevOps: Problemas comuns de segurança</title>
	<link>http://www.ricardomartins.com.br/devops-problemas-comuns-de-seguranca/</link>
	<content:encoded>&lt;p&gt;Muito boa essa apresentação mostrando os principais problemas de segurança relacionados à cultura de DevOps. LasCon 2014 DevOoops from Chris Gates&lt;/p&gt;
&lt;p&gt;O post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br/devops-problemas-comuns-de-seguranca/&quot;&gt;DevOps: Problemas comuns de segurança&lt;/a&gt; apareceu primeiro em &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br&quot;&gt;Ricardo Martins&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-01-19T13:16:27+00:00</dc:date>
</item>
<item rdf:about="http://www.ricardomartins.com.br/?p=5253">
	<title>Ricardo Martins: OpsWorks: Conhecendo a ferramenta de gerência de configuração da Amazon – Parte I/III</title>
	<link>http://www.ricardomartins.com.br/opsworks-conhecendo-ferramenta-de-gerencia-de-configuracao-da-amazon/</link>
	<content:encoded>&lt;p&gt;Olá pessoal, este artigo sobre o OpsWorks está muito relacionado com o tema gerência de configuração, e da mesma forma também com um outro assunto que vem ganhando bastante repercussão atualmente: DevOps. O foco não é falar sobre Gerência de Configuração e/ou DevOps, mas como estão relacionados com o OpsWorks, é importante introduzir o conceito [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;O post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br/opsworks-conhecendo-ferramenta-de-gerencia-de-configuracao-da-amazon/&quot;&gt;OpsWorks: Conhecendo a ferramenta de gerência de configuração da Amazon &amp;#8211; Parte I/III&lt;/a&gt; apareceu primeiro em &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br&quot;&gt;Ricardo Martins&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2015-01-16T15:38:49+00:00</dc:date>
</item>
<item rdf:about="http://stefanteixeira.com.br/tag/devops/rss/87648a0c-3679-41d4-b402-00cb368d388e">
	<title>Stefan Teixeira: Rodando seus testes com Frisby.js em um ambiente de CI - Parte 2: Jenkins e dicas sobre Frisby.js</title>
	<link>http://stefanteixeira.com.br/2014/12/14/rodando-seus-testes-com-frisby-js-em-um-ambiente-de-ci-parte-2-jenkins-e-dicas-sobre-frisby-js/</link>
	<content:encoded>&lt;p&gt;No &lt;a href=&quot;http://goo.gl/bmymZx&quot;&gt;post anterior (parte 1)&lt;/a&gt;, vimos como utilizar o Grunt em um projeto. Tudo que aprendemos está em um &lt;a href=&quot;https://github.com/stefanteixeira/exemplo-frisbyjs-grunt&quot;&gt;projeto no GitHub&lt;/a&gt;, o qual servirá de base para este post.&lt;/p&gt;

&lt;p&gt;Neste post, vamos ver como colocar nosso projeto com Grunt e Frisby.js para rodar no Jenkins. No final, vou dar umas dicas relevantes sobre Frisby.js, de coisas que aprendi após utilizá-lo em um projeto recente.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;Este post presume que você saiba o básico sobre Jenkins: configurações gerais, instalação e configuração de plugins, criação e execução de jobs, etc.. Caso você tenha alguma dúvida sobre Jenkins, basta ler &lt;a href=&quot;http://goo.gl/7X4Ftk&quot;&gt;o post &quot;Configurando Jenkins para um projeto com GhostDriver e Gradle&quot;&lt;/a&gt;, no qual explico tudo isso de forma bem didática. :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;configurandooprojetonojenkins&quot;&gt;Configurando o projeto no Jenkins&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h4 id=&quot;nodejsplugin&quot;&gt;NodeJS plugin&lt;/h4&gt;

&lt;p&gt;Como o nosso projeto roda em cima da plataforma &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;, vamos precisar instalar um &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/NodeJS+Plugin&quot;&gt;plugin do Node no Jenkins&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acesse a opção &quot;Gerenciar Jenkins&quot; no lado esquerdo da página principal e, em seguida, a opção &quot;Gerenciar Plugins&quot;&lt;/li&gt;
&lt;li&gt;Selecione a aba &quot;Disponíveis&quot; e digite na busca &quot;nodejs&quot;&lt;/li&gt;
&lt;li&gt;Será exibido o plugin &quot;NodeJS plugin&quot;, selecione-o e clique no botão &quot;Baixar agora, instalar e depois reiniciar&quot; (vide imagem abaixo)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/Screen-Shot-2014-12-11-at-22-29-26.png&quot; alt=&quot;node plugin&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;configurandooplugin&quot;&gt;Configurando o plugin&lt;/h4&gt;

&lt;p&gt;O próximo passo é configurar o plugin recém-instalado. Para isso:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acesse a opção &quot;Gerenciar Jenkins&quot;, no lado esquerdo da página principal e, em seguida, a opção &quot;Configurar o sistema&quot;&lt;/li&gt;
&lt;li&gt;Encontre a seção &quot;NodeJS&quot; e clique no botão &quot;Adicionar NodeJS&quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nessa parte, você tem duas opções: OU informa o diretório da instalação do Node.js (caso já esteja instalado na máquina que roda o Jenkins), OU pede para o Jenkins instalar automaticamente. Uma limitação da versão atual do plugin é que o auto-instalador funciona apenas em distros do Linux (o suporte para OS X e Windows ainda está em andamento).&lt;/p&gt;

&lt;p&gt;Para nosso exemplo, vou usar uma instalação prévia do Node.js, e também vou assumir que você leu o &lt;a href=&quot;http://goo.gl/bmymZx&quot;&gt;post da parte 1&lt;/a&gt; e já possui o grunt-cli instalado. Com isso, basta colocarmos o diretório da instalação do Node.js e dar um nome para a instalação, vide imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/Screen-Shot-2014-12-14-at-22-22-10.png&quot; alt=&quot;config node plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agora, estamos prontos para criar e configurar um job para rodar os testes do nosso projeto.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;criandoeconfigurandoumnovojob&quot;&gt;Criando e configurando um novo job&lt;/h4&gt;

&lt;p&gt;Para criar um novo job, selecione a opção &quot;Novo Item&quot; no lado esquerdo da página principal. Dê um nome para o job, selecione a opção &quot;Construir um projeto de software free-style&quot; e clique em OK.&lt;/p&gt;

&lt;p&gt;Na tela seguinte, procure a seção &quot;Gerenciamento de código fonte&quot;, selecione &quot;Git&quot; e informe a URL do repositório do projeto. Vamos informar a URL do repositório do projeto de exemplo, que é &lt;a href=&quot;https://github.com/stefanteixeira/exemplo-frisbyjs-grunt.git&quot;&gt;https://github.com/stefanteixeira/exemplo-frisbyjs-grunt.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na seção &quot;Ambiente de build&quot;, selecione a opção &quot;Provide Node &amp;amp; npm bin/ folder to PATH&quot; e selecione a instalação do Node.js que configuramos anteriormente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/Screen-Shot-2014-12-14-at-22-30-05.png&quot; alt=&quot;build env node&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Essa opção serve para adicionar a instalação do Node à variável PATH.&lt;/p&gt;

&lt;p&gt;Na seção &quot;Build&quot;, clique no botão &quot;Adicionar passo no build&quot; e selecione a opção &quot;Executar shell&quot;. Na caixa de texto, vamos informar os comandos necessários para fazer o build do nosso projeto. Precisamos de dois comandos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;npm install&lt;/strong&gt; -  esse comando irá instalar as dependências do nosso projeto, descritas no arquivo &lt;strong&gt;package.json&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;grunt&lt;/strong&gt; - esse comando irá executar a task default do arquivo do grunt (&lt;strong&gt;Gruntfile.js&lt;/strong&gt;). No caso, irá executar os testes do Frisby.js usando o jasmine-node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A configuração ficará da seguinte forma:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/Screen-Shot-2014-12-14-at-22-37-55.png&quot; alt=&quot;build exec npm grunt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A última coisa que iremos fazer é publicar os relatórios de execução dos testes, gerados pelo jasmine. No arquivo &lt;strong&gt;Gruntfile.js&lt;/strong&gt;, na task &lt;strong&gt;jasmine-node&lt;/strong&gt;, existe um campo onde configuramos o diretório onde serão salvos os relatórios. No nosso caso, estão sendo salvos em &lt;strong&gt;build/reports/jasmine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Com isso, vá até a seção &quot;Ações pós-builds&quot;, clique no botão &quot;Add post-build action&quot; e selecione a opção &quot;Publicar relatório de testes do JUnit&quot;. No campo &quot;Relatório XML de teste&quot;, informe &lt;strong&gt;&quot;build/reports/jasmine/*.xml&quot;&lt;/strong&gt;, para que todos os relatórios sejam obtidos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/Screen-Shot-2014-12-14-at-22-50-52.png&quot; alt=&quot;post build jasmine reports&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pronto! Podemos salvar e executar o job :)&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;executandoojob&quot;&gt;Executando o job&lt;/h4&gt;

&lt;p&gt;Depois de ter salvo as configurações, basta clicar na opção &quot;Construir agora&quot;, do lado esquerdo da tela. Aparecerá um build em execução na caixa &quot;Histórico de builds&quot;. Caso tudo dê certo, quando você estiver na tela do build, será exibida uma opção &quot;Resultado de testes&quot;. Clicando nela, podemos ver o relatório dos testes que foram executados:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/Screen-Shot-2014-12-14-at-22-56-46.png&quot; alt=&quot;frisby test result&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dicassobrefrisbyjs&quot;&gt;Dicas sobre Frisby.js&lt;/h2&gt;

&lt;p&gt;Para terminar o post, quero compartilhar duas dicas úteis quando forem desenvolver testes com o Frisby.js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;globalSetup&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um recurso muito útil, &lt;a href=&quot;https://github.com/vlucas/frisby#creating-tests&quot;&gt;descrito no README do GitHub do Frisby.js&lt;/a&gt;, é a função &lt;code&gt;globalSetup()&lt;/code&gt;. Essa função permite definirmos valores que precisamos enviar em &lt;strong&gt;todos&lt;/strong&gt; os requests, como por exemplo, valores de autenticação. No projeto em que usei, todos os requests precisam de 4 campos no header, e o globalSetup ajudou a reduzir código duplicado.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;inspectBody() e inspectJSON()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quando nossos testes falham e queremos &quot;debugar&quot;, um ótimo começo é usar as funções &lt;code&gt;inspectBody()&lt;/code&gt; ou &lt;code&gt;inspectJSON()&lt;/code&gt;. A &lt;code&gt;inspectJSON()&lt;/code&gt; vai exibir no console o JSON de resposta, enquanto a &lt;code&gt;inspectBody()&lt;/code&gt; vai exibir a resposta inteira, sem ser necessariamente JSON.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; caso algum endpoint da sua API retorne status 204 (No Content), &lt;strong&gt;NÃO&lt;/strong&gt; use a função &lt;code&gt;inspectJSON()&lt;/code&gt;! Mas por quê? Como o nome diz, quando um status 204 é retornado, não recebemos nenhum JSON de resposta. Caso você coloque um &lt;code&gt;inspectBody()&lt;/code&gt;, verá que é retornado &lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt;. Com isso, se você colocar um &lt;code&gt;inspectJSON()&lt;/code&gt;, o Frisby.js tentará transformar &quot;undefined&quot; em um JSON, o que causará uma exceção. ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;E é isso! Qualquer dúvida/crítica/sugestão, entrem em contato ou comentem. Não deixem de dar uma olhada nos links abaixo, na parte de referências. Para saberem mais sobre testes em APIs REST, confiram a série &lt;a href=&quot;http://www.fredmoreira.com/2014/12/como-voce-anda-testando-sua-api-rest.html&quot;&gt;&quot;Como você anda testando sua API REST?&quot;&lt;/a&gt;, &lt;a href=&quot;http://www.fredmoreira.com/&quot;&gt;no blog do Frederico Moreira&lt;/a&gt;. &lt;br /&gt;
Até o próximo post! :D&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;referncias&quot;&gt;Referências&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vlucas/frisby&quot;&gt;https://github.com/vlucas/frisby&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://ptmccarthy.github.io/2014/06/28/rest-testing-with-frisby/&quot;&gt;http://ptmccarthy.github.io/2014/06/28/rest-testing-with-frisby/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://stefanteixeira.com.br/2014/12/04/rodando-seus-testes-com-frisby-js-em-um-ambiente-de-ci-parte-1-introducao-ao-grunt/&quot;&gt;http://stefanteixeira.com.br/2014/12/04/rodando-seus-testes-com-frisby-js-em-um-ambiente-de-ci-parte-1-introducao-ao-grunt/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://keeptesting.com.br/2014/09/09/testando-suas-apis-com-frisby-js/&quot;&gt;http://keeptesting.com.br/2014/09/09/testando-suas-apis-com-frisby-js/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.fredmoreira.com/2014/11/como-voce-anda-testando-sua-api-rest.html&quot;&gt;http://www.fredmoreira.com/2014/11/como-voce-anda-testando-sua-api-rest.html&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.fredmoreira.com/2014/12/como-voce-anda-testando-sua-api-rest2.html&quot;&gt;http://www.fredmoreira.com/2014/12/como-voce-anda-testando-sua-api-rest2.html&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Sobre o autor:&lt;/strong&gt; Stefan Teixeira trabalha como QA Engineer e, desde o final de 2014, tem se aventurado no mundo DevOps. É Bacharel em Ciência da Computação pela UFRJ e MBA em Garantia de Qualidade de Software pela Escola Politécnica da UFRJ. Entusiasta de Testes Automatizados (e de tudo que possa ser automatizado!), Agile Testing e da cultura DevOps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contatos:&lt;/strong&gt; stefanfk@gmail.com | &lt;a href=&quot;https://twitter.com/stefan_teixeira&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://br.linkedin.com/in/stefanteixeira&quot;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2014-12-15T01:33:05+00:00</dc:date>
</item>
<item rdf:about="http://stefanteixeira.com.br/tag/devops/rss/92124a54-21b0-4a89-9834-0e77395050c6">
	<title>Stefan Teixeira: Configurando Travis CI para um projeto com GhostDriver e Gradle</title>
	<link>http://stefanteixeira.com.br/2014/09/01/configurando-travis-ci-para-um-projeto-com-ghostdriver-e-gradle/</link>
	<content:encoded>&lt;p&gt;Seguindo a linha dos últimos posts sobre Integração Contínua com o Jenkins, vamos falar hoje sobre o &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; e como configurá-lo para rodar um &lt;a href=&quot;http://goo.gl/dqBYFy&quot;&gt;projeto de exemplo com GhostDriver e Gradle&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;sobreghostdriveregradle&quot;&gt;Sobre GhostDriver e Gradle&lt;/h4&gt;

&lt;p&gt;Para quem não conhece o GhostDriver e o Gradle, eles já foram abordados em outros posts aqui do blog (clique no nome para abrir o post):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/MpnE4V&quot;&gt;Headless Testing com GhostDriver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/7X4Ftk&quot;&gt;Configurando Jenkins para um projeto com GhostDriver e Gradle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Em resumo: GhostDriver é a implementação do Selenium WebDriver para usar o headless browser PhantomJS. Gradle é uma ferramenta de build, assim como o Maven e o Ant. :)&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;travisci&quot;&gt;Travis CI&lt;/h4&gt;

&lt;p&gt;O &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; é um serviço de Integração Contínua na nuvem que pode ser conectado a repositórios no GitHub. Ele é gratuito para repositórios públicos e pago para repositórios privados.&lt;/p&gt;

&lt;p&gt;É um serviço excelente, amplamente usado em projetos no GitHub. Possui suporte a diversas linguagens, como: C, C++, Clojure, Erlang, Go, Groovy, Haskell, Java, JavaScript (com Node.js), Objective-C, Perl, PHP, Python, Ruby, Scala, etc.. Vale lembrar que a &lt;a href=&quot;http://docs.travis-ci.com/&quot;&gt;documentação&lt;/a&gt; também é muito boa.&lt;/p&gt;

&lt;h6 id=&quot;comootravisfunciona&quot;&gt;Como o Travis funciona?&lt;/h6&gt;

&lt;p&gt;Toda vez que dermos um push no nosso repositório do GitHub, o Travis irá executar os seguintes passos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Criar uma máquina virtual em branco (padrão: Ubuntu 12.04 LTS Server Edition 64 bit + 3GB de RAM)&lt;/li&gt;
&lt;li&gt;Pegar o código-fonte no GitHub&lt;/li&gt;
&lt;li&gt;Fazer o deploy da aplicação&lt;/li&gt;
&lt;li&gt;Rodar os testes&lt;/li&gt;
&lt;li&gt;Notificar o usuário (via e-mail, por exemplo)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;conectandootravisaumrepositriodogithub&quot;&gt;Conectando o Travis a um repositório do GitHub&lt;/h5&gt;

&lt;p&gt;Para conectar o Travis CI a um repositório do GitHub, primeiro devemos conseguir um token, que é gerado pelo Travis. Para obter o token:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acesse a página do Travis: &lt;a href=&quot;https://travis-ci.org/&quot;&gt;https://travis-ci.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Faça login com sua conta do GitHub&lt;/li&gt;
&lt;li&gt;Clique no seu nome (no lado superior direito da tela)&lt;/li&gt;
&lt;li&gt;Clique na aba &lt;strong&gt;Profile&lt;/strong&gt; e copie o token exibido&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, precisamos adicionar um novo serviço (Travis) no repositório do GitHub. Isso é feito da seguinte forma:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acesse o seu repositório do GitHub a ser integrado&lt;/li&gt;
&lt;li&gt;Clique em &lt;strong&gt;Settings:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/git1.png&quot; alt=&quot;git 1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clique na seção &lt;strong&gt;Webhooks &amp;amp; Services&lt;/strong&gt;. Em seguida, clique em &lt;strong&gt;Add service&lt;/strong&gt; e busque por &quot;Travis CI&quot;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/2-addService.png&quot; alt=&quot;2 add service&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na tela seguinte, informe seu usuário do GitHub e o token que você obteve anteriormente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalmente, habilite o projeto no Travis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acesse o Travis e clique no seu nome de usuário (no lado superior direito)&lt;/li&gt;
&lt;li&gt;Você verá uma lista dos repositórios públicos do seu GitHub. Habilite o Travis para o projeto que desejar, clicando no botão ON/OFF:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/3-enableProjectpng.png&quot; alt=&quot;3 enable project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pronto! Agora só falta configurarmos o arquivo de build, que veremos a seguir. :)&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;configurandoobuild&quot;&gt;Configurando o build&lt;/h5&gt;

&lt;p&gt;Um recurso excelente do Travis CI é que ele possui suporte nativo ao &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;. Dessa forma, não precisamos instalar o PhantomJS para rodar nossos testes com o GhostDriver, o que simplifica ainda mais a configuração. :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; O Travis também oferece suporte pra &lt;a href=&quot;http://docs.travis-ci.com/user/gui-and-headless-browsers/&quot;&gt;headless testing&lt;/a&gt; com &lt;a href=&quot;http://www.installationpage.com/selenium/how-to-run-selenium-headless-firefox-in-ubuntu/&quot;&gt;Xvfb + Firefox&lt;/a&gt;. Além disso, também tem suporte para usar o &lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O build do Travis é configurado através de um arquivo &lt;a href=&quot;http://www.yaml.org/&quot;&gt;YAML (YAML Ain't a Markup Language)&lt;/a&gt;, chamado &lt;strong&gt;&quot;.travis.yml&quot;&lt;/strong&gt;. A sintaxe é bem simples e a documentação do Travis ajuda a entender quais comandos usar de acordo com a necessidade. Veja abaixo algumas dicas pra entender/escrever melhor arquivos YAML:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leia arquivos .travis.yml de projetos quaisquer do GitHub&lt;/li&gt;
&lt;li&gt;Leia a documentação do Travis: &lt;a href=&quot;http://docs.travis-ci.com/&quot;&gt;http://docs.travis-ci.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use o Travis WebLint para validar se o arquivo que você escreveu está com a sintaxe correta: &lt;a href=&quot;https://lint.travis-ci.org/&quot;&gt;https://lint.travis-ci.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;criandoumarquivodebuild&quot;&gt;Criando um arquivo de build&lt;/h5&gt;

&lt;p&gt;Crie um arquivo com o nome &lt;strong&gt;&quot;.travis.yml&quot;&lt;/strong&gt; na raiz do repositório. Agora, vamos informar no arquivo o que o Travis precisa para o build. No nosso exemplo, como estamos trabalhando com um projeto Java, temos que dizer isso ao Travis, da seguinte forma:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;language: java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Em seguida, precisamos dizer qual versão da JDK vamos usar. O default é a Oracle JDK7, mas, para mostrar como funciona, vamos alterar para a versão OpenJDK7:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jdk:
  - openjdk7
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; É possível informar mais de uma versão de JDK, caso você precise testar sua aplicação em versões diferentes. :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para terminar, vamos ver a parte de notificações. Por default, o Travis irá enviar um e-mail de notificação para o committer e para o autor do commit quando:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;um build quebrar ou continuar quebrado&lt;/li&gt;
&lt;li&gt;um build quebrado for corrigido&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Você pode configurar os comportamentos default, além de configurar outros e-mails para que o Travis envie notificações. Também são suportadas notificações via IRC, Campfire, dentre outras formas. A parte da documentação que explica sobre notificações pode ser conferida &lt;a href=&quot;http://docs.travis-ci.com/user/notifications/&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No nosso exemplo, vamos configurar para que o Travis envie notificações por e-mail sempre, ou seja, independente do resultado do build. Um exemplo seria:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;notifications:
  email:
    recipients:
      - stefanfk@gmail.com
    on_success: always
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;CUIDADO:&lt;/strong&gt; Repare que as tags são indentadas com espaços em branco. Não use TAB para indentar! Valide no Travis WebLint se o seu arquivo está OK! ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;traviscigradle&quot;&gt;Travis CI + Gradle&lt;/h5&gt;

&lt;p&gt;Para projetos em Java, o Travis irá verificar se existe, na raiz do repositório:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;um arquivo de build do Gradle (build.gradle)&lt;/li&gt;
&lt;li&gt;um arquivo de build do Maven (pom.xml)&lt;/li&gt;
&lt;li&gt;um arquivo de build do Ant (build.xml)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No nosso caso, colocamos o arquivo de build do Gradle (e somente ele!) dentro da raiz do repositório do projeto. O Travis irá encontrar o arquivo e executar o build. :)&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;gerandonovobuildevisualizandoresultados&quot;&gt;Gerando novo build e visualizando resultados&lt;/h5&gt;

&lt;p&gt;Para que o Travis gere um novo build, basta alterarmos alguma coisa no repositório. Para nosso exemplo, vou alterar o arquivo .travis.yml, vide imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/4-commit.png&quot; alt=&quot;4 commit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Com isso, o Travis irá iniciar um novo build:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/5-newBuild.png&quot; alt=&quot;5 new build&quot; /&gt;&lt;/p&gt;

&lt;p&gt;É possível acompanhar o log de execução, pra ver os passos que estão sendo feitos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/6-log.png&quot; alt=&quot;6 log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No final do build, como esperado, recebi um e-mail de notificação:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/7-emailNotification.png&quot; alt=&quot;7 email&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;E é isso! Compartilhem suas dúvidas/sugestões/críticas nos comentários, ou entrem em contato! :D&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;referncias&quot;&gt;Referências&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.yaml.org/&quot;&gt;http://www.yaml.org/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://travis-ci.org/&quot;&gt;https://travis-ci.org&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://travis-ci.org/stefanteixeira/exemplo-ghostdriver-gradle&quot;&gt;https://travis-ci.org/stefanteixeira/exemplo-ghostdriver-gradle&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://lint.travis-ci.org/&quot;&gt;http://lint.travis-ci.org/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/stefanteixeira/exemplo-ghostdriver-gradle&quot;&gt;https://github.com/stefanteixeira/exemplo-ghostdriver-gradle&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://docs.travis-ci.com/user/getting-started/&quot;&gt;http://docs.travis-ci.com/user/getting-started/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://docs.travis-ci.com/user/languages/java/&quot;&gt;http://docs.travis-ci.com/user/languages/java/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://docs.travis-ci.com/user/notifications/&quot;&gt;http://docs.travis-ci.com/user/notifications/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://docs.travis-ci.com/user/ci-environment/&quot;&gt;http://docs.travis-ci.com/user/ci-environment/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Sobre o autor:&lt;/strong&gt; Stefan Teixeira trabalha como QA Engineer e, desde o final de 2014, tem se aventurado no mundo DevOps. É Bacharel em Ciência da Computação pela UFRJ e MBA em Garantia de Qualidade de Software pela Escola Politécnica da UFRJ. Entusiasta de Testes Automatizados (e de tudo que possa ser automatizado!), Agile Testing e da cultura DevOps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contatos:&lt;/strong&gt; stefanfk@gmail.com | &lt;a href=&quot;https://twitter.com/stefan_teixeira&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://br.linkedin.com/in/stefanteixeira&quot;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2014-09-01T19:26:46+00:00</dc:date>
</item>
<item rdf:about="http://stefanteixeira.com.br/tag/devops/rss/453a2ec2-1e16-46bc-b640-1efbfbabdfc5">
	<title>Stefan Teixeira: Configurando Jenkins para um projeto com PhantomCSS (+ Chuck Norris plugin)</title>
	<link>http://stefanteixeira.com.br/2014/08/15/configurando-jenkins-para-um-projeto-com-phantomcss-chuck-norris-plugin/</link>
	<content:encoded>&lt;p&gt;Na palestra sobre &lt;a href=&quot;http://goo.gl/ctp5TG&quot;&gt;Visual Regression Testing com PhantomCSS&lt;/a&gt;, mostrei um exemplo de como configurar o Jenkins para um projeto com PhantomCSS. Neste post, vou explicar com mais detalhes como fazer isso, mas já adianto que é bem simples! :)&lt;/p&gt;

&lt;h5 id=&quot;setup&quot;&gt;Setup&lt;/h5&gt;

&lt;p&gt;O projeto que vamos usar é o mesmo que criei para apresentar na palestra, clique &lt;a href=&quot;http://goo.gl/9xps0u&quot;&gt;aqui&lt;/a&gt; para acessá-lo. Lembre-se de que é necessário instalar o PhantomJS e o CasperJS na máquina que irá rodar o Jenkins. O README do projeto contém instruções para instalação em ambiente Windows, Ubuntu ou OS X.&lt;/p&gt;

&lt;p&gt;Para rodar o script de exemplo, navegue até o diretório do projeto e digite o seguinte comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;casperjs test testes/teste.js
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;instalandoochucknorrisplugin&quot;&gt;Instalando o Chuck Norris plugin&lt;/h5&gt;

&lt;p&gt;Para instalar o plugin, basta acessar as opções &quot;Gerenciar Jenkins&quot; -&gt; &quot;Gerenciar Plugins&quot; -&gt; aba &quot;Disponíveis&quot; -&gt; pesquisar por &quot;ChuckNorris Plugin&quot; e instalar. Caso surja alguma dúvida, no &lt;a href=&quot;http://goo.gl/7X4Ftk&quot;&gt;último post sobre Jenkins&lt;/a&gt; tem um passo-a-passo (com imagens) da instalação de plugins. ;)&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;criandoeconfigurandoojob&quot;&gt;Criando e configurando o job&lt;/h5&gt;

&lt;p&gt;Para criar um novo job, clique na opção &quot;Novo Item&quot;, no lado esquerdo da tela principal. Dê um nome ao job, selecione a opção &quot;Construir um projeto de software free-style&quot; e clique em OK:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-1.png&quot; alt=&quot;jenkins phantomcss&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na seção &quot;Gerenciamento de código fonte&quot;, selecione &quot;Git&quot; e informe a URL do repositório. Na figura, coloquei a URL do repositório do projeto de exemplo no meu GitHub: &lt;a href=&quot;https://github.com/stefanteixeira/exemplo-phantomcss-palestra.git&quot;&gt;https://github.com/stefanteixeira/exemplo-phantomcss-palestra.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-2.png&quot; alt=&quot;phantomcss 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na seção &quot;Build&quot;, clique em &quot;Adicionar passo no build&quot; e, em seguida, na opção &quot;Executar shell&quot;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-3.png&quot; alt=&quot;phantomcss 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na caixa de texto, digite o comando para rodar o script de teste, mas incluindo o parâmetro &lt;strong&gt;&quot;xunit=log.xml&quot;&lt;/strong&gt;. Ou seja:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;casperjs test testes/teste.js --xunit=log.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esse parâmetro vai fazer com que o CasperJS gere um arquivo XML de log que vamos publicar no Jenkins. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-4.png&quot; alt=&quot;phantomcss 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agora, vamos habilitar o Chuck Norris plugin. Na seção &quot;Ações pós-builds&quot;, clique em &quot;Add post-build action&quot; e na opção &quot;Activate Chuck Norris&quot;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-5.png&quot; alt=&quot;phantomcss 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para terminar, vamos configurar o Jenkins para publicar o relatório de testes. Clique novamente em &quot;Add post-build action&quot; e, dessa vez, escolha a opção &quot;Publicar relatório de testes do JUnit&quot;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-6.png&quot; alt=&quot;phantomcss 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No campo &quot;Relatório XML de teste&quot;, informe &quot;log.xml&quot;, já que o arquivo será criado na raiz do projeto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-7.png&quot; alt=&quot;phantomcss 7&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;primeiraexecuobuildfailure&quot;&gt;Primeira execução (build failure)&lt;/h5&gt;

&lt;p&gt;Para executar o build, clique em &quot;Construir agora&quot;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-8.png&quot; alt=&quot;phantomcss 8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aparecerá um build em execução na caixa &quot;Histórico de builds&quot;. Clique nele e selecione a opção &quot;Console output&quot; para acompanhar a execução. Observe no log que o PhantomCSS gerou novos screenshots, e que o build ficou com status &lt;strong&gt;&quot;FAILURE&quot;&lt;/strong&gt;, já que nenhum teste foi executado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-9.png&quot; alt=&quot;phantomcss 9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na página inicial do build, podemos ver que o Chuck Norris não ficou muito feliz com essa falha:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-10.png&quot; alt=&quot;phantomcss 10&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;segundaexecuobuildsuccess&quot;&gt;Segunda execução (build success)&lt;/h5&gt;

&lt;p&gt;Executando o build novamente, podemos ver no log que os testes passaram, ou seja, o PhantomCSS não encontrou mudanças nos screenshots. Com isso, o build terminou com status &lt;strong&gt;&quot;SUCCESS&quot;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-11.png&quot; alt=&quot;phantomcss 11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na página inicial do build, podemos ver que o Chuck Norris ficou feliz :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-12.png&quot; alt=&quot;phantomcss 12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Também nesse build, é possível ver que foi publicado o resultado de testes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stefanteixeira.com.br/content/images/2014/12/jenkins-phantomcss-13.png&quot; alt=&quot;phantomcss 13&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;É isso! Qualquer dúvida ou sugestão, podem postar nos comentários ou entrar em contato! :)&lt;/p&gt;

&lt;p&gt;Até o próximo post!&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;referncias&quot;&gt;Referências&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/ChuckNorris+Plugin&quot;&gt;https://wiki.jenkins-ci.org/display/JENKINS/ChuckNorris+Plugin&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/Huddle/PhantomCSS&quot;&gt;https://github.com/Huddle/PhantomCSS&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://casperjs.org/&quot;&gt;http://casperjs.org/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://www.packtpub.com/web-development/instant-testing-casperjs-instant&quot;&gt;https://www.packtpub.com/web-development/instant-testing-casperjs-instant&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Sobre o autor:&lt;/strong&gt; Stefan Teixeira trabalha como QA Engineer e, desde o final de 2014, tem se aventurado no mundo DevOps. É Bacharel em Ciência da Computação pela UFRJ e MBA em Garantia de Qualidade de Software pela Escola Politécnica da UFRJ. Entusiasta de Testes Automatizados (e de tudo que possa ser automatizado!), Agile Testing e da cultura DevOps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contatos:&lt;/strong&gt; stefanfk@gmail.com | &lt;a href=&quot;https://twitter.com/stefan_teixeira&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://br.linkedin.com/in/stefanteixeira&quot;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2014-08-15T05:43:27+00:00</dc:date>
</item>
<item rdf:about="http://www.ricardomartins.com.br/?p=5068">
	<title>Ricardo Martins: ElasticSearch: Adicionando plugins de gerenciamento</title>
	<link>http://www.ricardomartins.com.br/adicionando-plugins-de-gerenciamento-e-monitoramento-ao-elasticsearch/</link>
	<content:encoded>&lt;p&gt;O Elastic Search é uma poderosa ferramenta com muitas informações interessantes de serem analisadas e monitoradas. No entanto pela ampla variedade de informações disponíveis nele, pode ser complexo obter as informações. Para facilitar, existem alguns plugins bastante interessantes que tornam o trabalho mais simples. Eu vou citar algumas e demontrar as que considero mais interessantes, o [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;O post &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br/adicionando-plugins-de-gerenciamento-e-monitoramento-ao-elasticsearch/&quot;&gt;ElasticSearch: Adicionando plugins de gerenciamento&lt;/a&gt; apareceu primeiro em &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.ricardomartins.com.br&quot;&gt;Ricardo Martins&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2014-06-10T18:58:54+00:00</dc:date>
</item>
<item rdf:about="http://webcomfarinha.com/blog/?p=624">
	<title>Matheus Andrade: Git: Juntando vários Commits em um só usando SQUASH</title>
	<link>http://webcomfarinha.com/blog/juntando-varios-commits-em-um-so-usando-git-squash/</link>
	<content:encoded>&lt;p&gt;Hoje, deixo aqui uma dica bastante legal a ser utilizada no versionamento de seus códigos utilizando &lt;strong&gt;Git&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Situação&lt;/h2&gt;
&lt;p&gt;Você está com o código de seu projeto organizado e versionado com &lt;strong&gt;Git&lt;/strong&gt;. Para desenvolvimento de novas funcionalidades, você adota a boa prática do uso de branches, assim como para correções de erros também &amp;#8211; bugfixes.&lt;/p&gt;
&lt;p&gt;Adotando o fluxo recomendado em um versionamento Git, teríamos um ambiente semelhante a figura abaixo:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter&quot; alt=&quot;pricipais branches no versionamento com Git&quot; src=&quot;http://git-scm.com/images/about/branches@2x.png&quot; width=&quot;350&quot; height=&quot;202&quot; /&gt;&lt;/p&gt;
&lt;p&gt;http://git-scm.com/images/about/branches@2x.png&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-624&quot;&gt;&lt;/span&gt;Seu código em produção, funcional, testado, aprovado, estaria no &lt;strong&gt;branch master.&lt;/strong&gt; Para desenvolvimento, sempre teríamos um branch específico (neste caso chamado &lt;strong&gt;develop&lt;/strong&gt;), do qual criaríamos branches para cada funcionalidade, correção de bugs ou códigos adicionais. Assim, sempre ao término do desenvolvimento de um branch, faríamos um &lt;strong&gt;merge&lt;/strong&gt; com o &lt;strong&gt;develop&lt;/strong&gt;, resolveríamos os conflitos, faríamos testes e posteriormente jogaríamos o código pronto e funcional no branch principal (&lt;strong&gt;master&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;No fluxo normal de seu trabalho na correção de um bug no código vc seguirá (geralmente) as seguintes etapas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;criação de um branch bugfix a partir do branch develop.&lt;/li&gt;
&lt;li&gt;desenvolvimento no branch bugfix de seu código para corrigir o erro.&lt;/li&gt;
&lt;li&gt;merge/rebase dos branches develop e bugfix&lt;/li&gt;
&lt;li&gt;rebase/merge no branch master com o branch develop&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Problema&lt;/h2&gt;
&lt;p&gt;Como convenção de versionamento adotada na sua equipe na correção de bugs, o código retificado (com a solução do problema) deve ir para produção (branch master) em um único commit. Contudo, você como bom desenvolvedor e versionador &lt;strong&gt;Git&lt;/strong&gt;, adota também a máxima &lt;strong&gt;&amp;#8220;Commit all the time&amp;#8221;&lt;/strong&gt; para proteger seu código garantindo bom versionamento.&lt;/p&gt;
&lt;h2&gt;Como Fazer?&lt;/h2&gt;
&lt;p&gt;Em seu desenvolvimento, não tenha medo ou preguiça de commitar. Em nosso caso, suponhamos que em seu branch bugfix vc realizou os seguintes commits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;Commit #1: inserindo novos testes para correção do bug;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Commit #2: implementando lógica para que os testes funcionem;&lt;/li&gt;
&lt;li&gt;Commit #3: mais implementações para que os testes funcionem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Você consegue resolver o bug apresentado em seu código. Quando olha o status de seu branch percebe que ele possui 03 commits. Mas, para o merge com o branch develop, precisa ir tudo em um commit único. Como fazer? Simples:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;$ git checkout develop&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;$ git merge &amp;#8212; squash bugfix&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Veja o status de seu branch develop. Perceba que o Git trouxe para você todos os commits realizados em seu branch bugfix, mas não realizou ainda o commit no develop. Ele pega todos os arquivos, aplica o merge, porém deixa-os na &lt;a href=&quot;http://git-scm.com/about/staging-area&quot;&gt;&lt;strong&gt;staging area &lt;/strong&gt;&lt;/a&gt;preparados para commit. Assim, basta você agora realizar um:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;$ git commit -m &amp;#8220;adicionando correcao do bug foo bla&amp;#8221; &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;que todos os commits do branch bugfix virarão um único commit no branch develop.&lt;/p&gt;
&lt;p&gt;O squash é muito útil, pois o desenvolvedor precisa commitar o tempo todo em seu ambiente de desenvolvimento garantindo a segurança de seu código e para manter o branch master mais clean e fácil de visualização, pois neste caso, toda a correção do bug estaria representado na linha do tempo por um único commit.&lt;/p&gt;</content:encoded>
	<dc:date>2013-01-20T18:26:10+00:00</dc:date>
</item>

</rdf:RDF>
